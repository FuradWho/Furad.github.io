<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo 常用命令</title>
    <url>/2021/10/21/hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="常用-hexo-命令"><a href="#常用-hexo-命令" class="headerlink" title="常用 hexo 命令"></a><strong>常用 hexo 命令</strong></h1><h2 id="初始化命令"><a href="#初始化命令" class="headerlink" title="初始化命令"></a>初始化命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo -g		 //安装hexo</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> npm update hexo -g		 //更新hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init			     //初始化博客</span></span><br></pre></td></tr></table></figure>

<h2 id="命令简写"><a href="#命令简写" class="headerlink" title="命令简写"></a>命令简写</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo n <span class="string">&quot;博客名称&quot;</span> = hexo new <span class="string">&quot;博客名称&quot;</span>	//新建一篇博客</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g = hexo generate				 //生成页面</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d = hexo deploy				     //部署</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo new page <span class="string">&quot;name&quot;</span>  				 //新建页面</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g -d                                //生成页面并部署</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s = hexo server	                   //启动服务器、本地预览</span></span><br></pre></td></tr></table></figure>

<h2 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo server	                //hexo会监视文件变动并自动更新，无须重启服务器</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server -s	            //静态模式</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server -p 5000	        //更改端口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server -i 192.168.1.1	//自定义 IP地址</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo clean	                //清除缓存和已生成的静态文件，若是网页正常情况下可以忽略这条命令</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo <span class="built_in">help</span>                     //帮助</span></span><br></pre></td></tr></table></figure>

<h2 id="博客头格式"><a href="#博客头格式" class="headerlink" title="博客头格式"></a>博客头格式</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过如下字段,Hexo会自动添加博文分类和博文标签的相关配置</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">title</span> <span class="comment"># 添加博文标题</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">categories</span> <span class="comment"># 添加博文分类</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">tags</span> <span class="comment"># 添加博文标签</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>奇巧淫技</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>一元线性回归及Java实现</title>
    <url>/2021/08/15/%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%8F%8AJava%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="一元线性回归及Java实现"><a href="#一元线性回归及Java实现" class="headerlink" title="一元线性回归及Java实现"></a>一元线性回归及Java实现</h1><h2 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h2><p>回归问题是研究自变量和因变量之间关系的一种预测模型技术。例如我们可以通过回归模型去预测房价与房子面积之间的关系，一个人每周花在微信上的时间和他微信好友数量之间的关系等。</p>
<p>回归模型定义了输入和输出的关系。输入为现有信息，输出为预测。</p>
<p>一个预测问题在回归模型下的解决步骤为：</p>
<ol>
<li>构造训练集；</li>
<li>学习，得到输入输出间的关系；</li>
<li>预测，通过学习得到的关系预测输出。</li>
</ol>
<h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>假设要使用回归模型预测一个人每周花在微信上的时间和微信好友数量之间的关系，可以用如下的表达式表示：</p>
<p>y=ax+b+e</p>
<p>其中，<em>y</em>是你每周需要花费在微信上的时间，<em>x</em>是你的微信好友数量，<em>e</em>是误差。对于误差<em>e</em>，它不是一个定值，有一对<em>y</em>和<em>x</em>，就有一个<em>e</em>，<em>e</em>的值满足正态分布。</p>
<h2 id="使用最小二乘法拟合"><a href="#使用最小二乘法拟合" class="headerlink" title="使用最小二乘法拟合"></a>使用最小二乘法拟合</h2><p>对于上面的样本集，我们尝试用y=ax+b+ey=ax+b+e去进行拟合，那么可以得到：</p>
<p>∣e∣=∣ax+b−y∣</p>
<p>误差大小其实就是猜想的ax+bax+b的值和观测到的<em>y</em>值之间的差值。把所有的∣e∣∣e∣都求和，构造一个函数：</p>
<p>Q=n∑(axi+b−yi)2</p>
<p>当QQ最小的时候，即可得到最佳拟合的直线。</p>
<h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><p>首先构造一个类来存放记录：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> y;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getXY</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x * <span class="keyword">this</span>.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后构造<code>MyLinearRegression</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinearRegression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DataNode&gt; list;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> alpha;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> beta;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> r;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLinearRegression</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = <span class="keyword">new</span> ArrayList&lt;DataNode&gt;();</span><br><span class="line">        init(path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getAlpha</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> alpha;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBeta</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beta;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getR</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(path)));</span><br><span class="line">        String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String str[] = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            DataNode dataNode = <span class="keyword">new</span> DataNode();</span><br><span class="line">            dataNode.setX(Double.parseDouble(str[<span class="number">0</span>]));</span><br><span class="line">            dataNode.setY(Double.parseDouble(str[<span class="number">1</span>]));</span><br><span class="line">            <span class="keyword">this</span>.list.add(dataNode);</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后要根据读取到的数据去求<code>alpha</code>，<code>beta</code>和<code>r</code>的值。可以直接利用上面的公式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = list.size();</span><br><span class="line">    <span class="keyword">double</span> sumX = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> sumY = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> sumXY = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> sumX2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (DataNode dataNode : list)&#123;</span><br><span class="line">        sumX += dataNode.getX();</span><br><span class="line">        sumY += dataNode.getY();</span><br><span class="line">        sumXY += dataNode.getXY();</span><br><span class="line">        sumX2 += Math.pow(dataNode.getX(), <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.alpha = (((sumY * sumX) / n) - sumXY) / (((sumX * sumX) / n) - sumX2);</span><br><span class="line">    <span class="keyword">this</span>.beta = (sumY - <span class="keyword">this</span>.alpha * sumX) / n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getR2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> den = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> sumY = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (DataNode dataNode : list)&#123;</span><br><span class="line">        sumY += dataNode.getY();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> avgY = sumY / list.size();</span><br><span class="line">    <span class="keyword">for</span> (DataNode dataNode : list)&#123;</span><br><span class="line">        num += Math.pow((dataNode.getY() - (dataNode.getX() * <span class="keyword">this</span>.alpha + beta)), <span class="number">2</span>);</span><br><span class="line">        den += Math.pow((dataNode.getY() - avgY), <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.r = <span class="number">1</span> - (num / den);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用上述数据集拟合：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        String path = <span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line">        MyLinearRegression linearRegression = <span class="keyword">new</span> MyLinearRegression(path);</span><br><span class="line">        linearRegression.getAB();</span><br><span class="line">        linearRegression.getR2();</span><br><span class="line">        System.out.println(<span class="string">&quot;alpha = &quot;</span> + linearRegression.getAlpha());</span><br><span class="line">        System.out.println(<span class="string">&quot;beta = &quot;</span> + linearRegression.getBeta());</span><br><span class="line">        System.out.println(<span class="string">&quot;R2 = &quot;</span> + linearRegression.getR());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">alpha = <span class="number">0.6058710840658103</span></span><br><span class="line">beta = <span class="number">26.861280144241604</span></span><br><span class="line">R2 = <span class="number">0.9001321912140731</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Machine learning</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>阅后即焚（一）</title>
    <url>/2021/08/14/%E9%98%85%E5%90%8E%E5%8D%B3%E7%84%9A%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="阅后即焚（一）"><a href="#阅后即焚（一）" class="headerlink" title="阅后即焚（一）"></a><strong>阅后即焚（一）</strong></h1><p>生命只是一连串孤立的片刻，靠着回忆和幻想，许多意义浮现了，然后消失，消失之后又浮现。<br>      ——普鲁斯特《追忆似水年华》</p>
<p>“おげんきですか？わたしはげんきです”，而病床上的少女藤井树也喃喃的问“おげんきですか？わたしはげんきです”。</p>
<p>我爱你，想着你久久无法忘怀！</p>
<p>曾经一度被说像“春天小熊”而感动，原来是一只来自挪威森林的小熊。“春天的原野里，你一个人正走着，对面走来一只可爱的小熊，浑身的毛活像天鹅绒，眼睛圆鼓鼓的。它这么对你说道：‘你好，小姐，和我一块儿打滚玩儿好么？’接着，你就和小熊抱在一起，顺着长满三叶草的山坡咕噜咕噜滚下去，整整玩了一大天。”很喜欢这段渡边对绿子说的话，喜欢得不得了。</p>
<p>我在桌前静静地看着你，越来越喜欢，越来越依赖，无法失去！</p>
]]></content>
      <categories>
        <category>阅后即焚</category>
      </categories>
      <tags>
        <tag>emo</tag>
      </tags>
  </entry>
  <entry>
    <title>Fabric 区块数据解析</title>
    <url>/2021/10/21/Fabric-%E5%8C%BA%E5%9D%97%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Fabric-区块数据解析"><a href="#Fabric-区块数据解析" class="headerlink" title="Fabric 区块数据解析"></a>Fabric 区块数据解析</h1><p>这个文章主要是使用 Go 对于 Fabric 的区块数据进行解析。</p>
<h2 id="区块分析"><a href="#区块分析" class="headerlink" title="区块分析"></a>区块分析</h2><p>英文的区块结构说明：</p>
<img src="Fabric-区块数据解析.assets/1177632-20210201215309005-823518458.png" alt="1177632-20210201215309005-823518458" style="zoom:80%;" />

<p>中文的区块结构说明：</p>
<p><img src="Fabric-%E5%8C%BA%E5%9D%97%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90.assets/1177632-20210201215345755-928464081.png" alt="1177632-20210201215345755-928464081"></p>
<p>数据结构：</p>
<p><img src="Fabric-%E5%8C%BA%E5%9D%97%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90.assets/1177632-20210201215422417-1609853608.png" alt="1177632-20210201215422417-1609853608"></p>
]]></content>
      <categories>
        <category>Hyperledger Fabric</category>
      </categories>
      <tags>
        <tag>Fabric</tag>
      </tags>
  </entry>
</search>
