{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://www.furadwho.top","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2021-10-20T14:28:03.701Z","updated":"2021-10-20T14:28:03.701Z","comments":false,"path":"/404.html","permalink":"http://www.furadwho.top/404.html","excerpt":"","text":""},{"title":"分类","date":"2021-10-20T14:28:03.702Z","updated":"2021-10-20T14:28:03.702Z","comments":false,"path":"categories/index.html","permalink":"http://www.furadwho.top/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-10-20T14:28:03.703Z","updated":"2021-10-20T14:28:03.703Z","comments":true,"path":"links/index.html","permalink":"http://www.furadwho.top/links/index.html","excerpt":"","text":""},{"title":"关于小站","date":"2021-10-23T11:17:24.327Z","updated":"2021-10-23T11:17:24.327Z","comments":false,"path":"about/index.html","permalink":"http://www.furadwho.top/about/index.html","excerpt":"","text":""},{"title":"书单","date":"2021-10-20T14:28:03.702Z","updated":"2021-10-20T14:28:03.702Z","comments":false,"path":"books/index.html","permalink":"http://www.furadwho.top/books/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-10-20T14:28:03.703Z","updated":"2021-10-20T14:28:03.703Z","comments":false,"path":"repository/index.html","permalink":"http://www.furadwho.top/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-10-20T14:28:03.704Z","updated":"2021-10-20T14:28:03.704Z","comments":false,"path":"tags/index.html","permalink":"http://www.furadwho.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"学了一个月，什么是Hyperledger Fabric","slug":"学了一个月，什么是Hyperledger-Fabric","date":"2021-10-23T07:06:01.000Z","updated":"2021-10-23T10:47:07.690Z","comments":true,"path":"2021/10/23/学了一个月，什么是Hyperledger-Fabric/","link":"","permalink":"http://www.furadwho.top/2021/10/23/%E5%AD%A6%E4%BA%86%E4%B8%80%E4%B8%AA%E6%9C%88%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AFHyperledger-Fabric/","excerpt":"","text":"","categories":[{"name":"Hyperledger Fabric","slug":"Hyperledger-Fabric","permalink":"http://www.furadwho.top/categories/Hyperledger-Fabric/"}],"tags":[{"name":"Fabric","slug":"Fabric","permalink":"http://www.furadwho.top/tags/Fabric/"}]},{"title":"学了两个月，什么是区块链","slug":"学了两个月，什么是区块链","date":"2021-10-23T07:05:01.000Z","updated":"2021-10-23T10:46:40.493Z","comments":true,"path":"2021/10/23/学了两个月，什么是区块链/","link":"","permalink":"http://www.furadwho.top/2021/10/23/%E5%AD%A6%E4%BA%86%E4%B8%A4%E4%B8%AA%E6%9C%88%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AF%E5%8C%BA%E5%9D%97%E9%93%BE/","excerpt":"","text":"","categories":[{"name":"区块链","slug":"区块链","permalink":"http://www.furadwho.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"}],"tags":[{"name":"区块链","slug":"区块链","permalink":"http://www.furadwho.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"}]},{"title":"Git 常用操作","slug":"Git-常用操作","date":"2021-10-22T02:10:53.000Z","updated":"2021-10-23T09:01:37.879Z","comments":true,"path":"2021/10/22/Git-常用操作/","link":"","permalink":"http://www.furadwho.top/2021/10/22/Git-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/","excerpt":"","text":"Git 常用操作比较常用的一些 Git 操作，但是日常只需要记住几个就可以。最近实习公司里面一直使用的 SVN ，但是我还是更偏向 Git 这个工具，怎么说呢，能有个地方放着就行了，哈哈哈 几个专用名词： Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库 Git 学习Git是一个分布式版本管理系统，是为了更好地管理Linux内核开发而创立的。 新建代码库12345678# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url] 配置Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。 123456789# 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot; 增加 / 删除文件123456789101112131415161718192021# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 代码提交123456789101112131415161718# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ... 分支123456789101112131415161718192021222324252627282930313233343536373839404142# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch] 标签1234567891011121314151617181920212223242526# 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag] 查看信息123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog 远程同步1234567891011121314151617181920212223242526272829# 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all# merge 用merge的git路线是跳跃的，如果版本回退你也找不到自己想要的版本$ git pull = git fetch + git merge FETCH_HEAD # 使用rebase操作会更好一点，这样可以线性的看到每一次提交，并且没有增加提交节点$ git pull --rebase = git fetch + git rebase FETCH_HEAD 撤销12345678910111213141516171819202122232425262728293031# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop 其他12# 生成一个可供发布的压缩包$ git archive 执行 git fetch origin master 时，它的意思是从名为 origin 的远程上拉取名为 master 的分支到本地分支 origin/master 中。既然是拉取代码，当然需要同时指定远程名与分支名，所以分开写。 执行 git merge origin/master 时，它的意思是合并名为 origin/master 的分支到当前所在分支。既然是分支的合并，当然就与远程名没有直接的关系，所以没有出现远程名。需要指定的是被合并的分支。 执行 git push origin master 时，它的意思是推送本地的 master 分支到远程 origin，涉及到远程以及分支，当然也得分开写了。 还可以一次性拉取多个分支的代码：git fetch origin master stable oldstable； 也还可以一次性合并多个分支的代码：git merge origin/master hotfix-2275 hotfix-2276 hotfix-2290；","categories":[{"name":"奇巧淫技","slug":"奇巧淫技","permalink":"http://www.furadwho.top/categories/%E5%A5%87%E5%B7%A7%E6%B7%AB%E6%8A%80/"}],"tags":[{"name":"git","slug":"git","permalink":"http://www.furadwho.top/tags/git/"}]},{"title":"Fabric 区块数据解析","slug":"Fabric-区块数据解析","date":"2021-10-21T03:38:27.000Z","updated":"2021-10-23T06:57:16.138Z","comments":true,"path":"2021/10/21/Fabric-区块数据解析/","link":"","permalink":"http://www.furadwho.top/2021/10/21/Fabric-%E5%8C%BA%E5%9D%97%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/","excerpt":"","text":"Fabric 区块数据解析这个文章主要是使用 Go 对于 Fabric 的区块数据进行解析。因为之前要搞一个在 Fabric 基础之上的区块链浏览器，使用的是 Fabric-Go-SDK ，就得对于他这区块数据进行一个解析，说实话，确实麻烦。 区块分析首先，区块链之中的区块结构就是包含区块头，区块体。但是 Fabric 的区块数据结构有一些变化，看下面的图我们也能看出来，Block Header（区块头），Block Data（区块体，包含所有的交易信息），加上 Block MetaData（当前区块的相关元数据）。这些数据我们几乎都是可以通过解析进行获取到的。 英文的区块结构说明： 中文的区块结构说明： 数据结构： 在我的参考文档之中有个很长的 JSON 格式数据（勉强看一眼）： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178&#123; &quot;header&quot;: &#123; &quot;number&quot;: &quot;14&quot;, &quot;previous_hash&quot;: &quot;057935b395be9d6757f61a62eea2fd5c37e7089f3c991a7a9a131aefb255d450&quot;, &quot;data_hash&quot;: &quot;39ba8f0e54e75980414b301a343f42981ba63f8f105cd72d0e039010843aa920&quot; &#125;, &quot;data&quot;: &#123; &quot;data&quot;: [&#123; &quot;signature&quot;: &#123; &quot;type&quot;: &quot;Buffer&quot;, &quot;data&quot;: [48, 68, 2, 32, 53, 212, 86, 141, 134, 170, 144, 75, 132, 68, 229, 103, 122, 240, 21, 201, 139, 191, 77, 193, 50, 192, 31, 9, 15, 187, 65, 112, 239, 36, 205, 182, 2, 32, 98, 217, 249, 62, 93, 24, 158, 247, 180, 186, 122, 237, 141, 54, 228, 20, 218, 234, 24, 246, 118, 205, 134, 187, 250, 198, 255, 79, 129, 159, 164, 220] &#125;, &quot;payload&quot;: &#123; &quot;header&quot;: &#123; &quot;channel_header&quot;: &#123; &quot;type&quot;: 3, &quot;version&quot;: 1, &quot;timestamp&quot;: &quot;2021-01-10T12:01:29.673Z&quot;, &quot;channel_id&quot;: &quot;common&quot;, &quot;tx_id&quot;: &quot;ff28b4847400b16742245590d908b57a3643e4cc62baf3264dd8751070342314&quot;, &quot;epoch&quot;: &quot;0&quot;, &quot;extension&quot;: &#123; &quot;type&quot;: &quot;Buffer&quot;, &quot;data&quot;: [18, 11, 18, 9, 99, 104, 97, 105, 110, 99, 111, 100, 101] &#125;, &quot;typeString&quot;: &quot;ENDORSER_TRANSACTION&quot; &#125;, &quot;signature_header&quot;: &#123; &quot;creator&quot;: &#123; &quot;Mspid&quot;: &quot;org1&quot;, &quot;IdBytes&quot;: &quot;-----BEGIN CERTIFICATE-----\\nMIICcTCCAhegAwIBAgIUbtNpC7qvKr1n5OxgOZiaBRu2VtgwCgYIKoZIzj0EAwIw\\nczELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNh\\nbiBGcmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMT\\nE2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMjEwMTEwMTE1NjAwWhcNMjIwMTEwMTIw\\nMTAwWjAvMRwwDQYDVQQLEwZjbGllbnQwCwYDVQQLEwRvcmcxMQ8wDQYDVQQDEwZh\\nZG1pbjEwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASlFdeOOyJRw4/25L62W/KA\\nmYpCFsV0CwnezSVEuJL44vC0vqpYUlk1CdR1UO8bkcutgBHXsly+gWyH+GZtSD59X\\no4HMMIHJMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBSu\\nKGe8YTCjfa0+f+l0Q6Woq+S94zArBgNVHSMEJDAigCA2OH3OJFJR5m75pJceBgqt\\ni7zg18hHdCVIjZOnvoUxazBdBggqAwQFBgcIAQRReyJhdHRycyI6eyJoZi5BZmZp\\nbGlhdGlvbiI6Im9yZzEiLCJoZi5FbnJvbGxtZW50SUQiOiJhZG1pbjEiLCJoZi5U\\neXBlIjoiY2xpZW50In19MAoGCCqGSM49BAMCA0gAMEUCIQCiNYmu/NaH/pBStOZf\\nfa2OcoTmBsJvztFikt/+CGjZ0gIgUJd1Ay3vi1V/WNMoAxr/3uA84qwAP0TRwcQw\\nIjyEzZA=\\n-----END CERTIFICATE-----\\n&quot; &#125;, &quot;nonce&quot;: &#123; &quot;type&quot;: &quot;Buffer&quot;, &quot;data&quot;: [217, 120, 226, 190, 89, 228, 29, 80, 164, 122, 27, 114, 128, 137, 117, 209, 53, 235, 81, 90, 147, 12, 11, 218] &#125; &#125; &#125;, &quot;data&quot;: &#123; &quot;actions&quot;: [&#123; &quot;header&quot;: &#123; &quot;creator&quot;: &#123; &quot;Mspid&quot;: &quot;org1&quot;, &quot;IdBytes&quot;: &quot;-----BEGIN CERTIFICATE-----\\nMIICcTCCAhegAwIBAgIUbtNpC7qvKr1n5OxgOZiaBRu2VtgwCgYIKoZIzj0EAwIw\\nczELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNh\\nbiBGcmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMT\\nE2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMjEwMTEwMTE1NjAwWhcNMjIwMTEwMTIw\\nMTAwWjAvMRwwDQYDVQQLEwZj1bGllbnQwCwYDVQQLEwRvcmcxMQ8wDQYDVQQDEwZh\\nZG1pbjEwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASlFdeOOyJRw4/25L62W/KA\\nmYpCFsV0CwnezSVEuJL44vC0vqpYUlk1CdRUO8bkcutgBHXsly+gWyH+GZtSD59X\\no4HMMIHJMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBSu\\nKGe8YTCjfa0+f+l0Q6Woq+S94zArBgNVHSMEJDAigCA2OH3OJFJR5m75pJceBgqt\\ni7zg18hHdCVIjZOnvoUxazBdBggqAwQFBgcIAQRReyJhdHRycyI6eyJoZi5BZmZp\\nbGlhdGlvbiI6Im9yZzEiLCJoZi5FbnJvbGxtZW50SUQiOiJhZG1pbjEiLCJoZi5U\\neXBlIjoiY2xpZW50In19MAoGCCqGSM49BAMCA0gAMEUCIQCiNYmu/NaH/pBStOZf\\nfa2OcoTmBsJvztFikt/+CGjZ0gIgUJd1Ay3vi1V/WNMoAxr/3uA84qwAP0TRwcQw\\nIjyEzZA=\\n-----END CERTIFICATE-----\\n&quot; &#125;, &quot;nonce&quot;: &#123; &quot;type&quot;: &quot;Buffer&quot;, &quot;data&quot;: [217, 120, 226, 190, 89, 228, 29, 80, 164, 122, 27, 114, 128, 137, 117, 209, 53, 235, 81, 90, 147, 12, 11, 218] &#125; &#125;, &quot;payload&quot;: &#123; &quot;chaincode_proposal_payload&quot;: &#123; &quot;input&quot;: &#123; &quot;chaincode_spec&quot;: &#123; &quot;type&quot;: 1, &quot;typeString&quot;: &quot;GOLANG&quot;, &quot;input&quot;: &#123; &quot;args&quot;: [&#123; &quot;type&quot;: &quot;Buffer&quot;, &quot;data&quot;: [112, 117, 116] &#125;, &#123; &quot;type&quot;: &quot;Buffer&quot;, &quot;data&quot;: [123, 34, 117, 115, 101, 114, 110, 97, 109, 101, 34, 12, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 34, 97, 99, 116, 105, 111, 110, 34, 58, 34, 115, 116, 111, 114, 101, 34, 44, 34, 109, 111, 110, 101, 121, 34, 58, 34, 50, 48, 48, 34, 125] &#125;], &quot;decorations&quot;: &#123;&#125; &#125;, &quot;chaincode_id&quot;: &#123; &quot;path&quot;: &quot;&quot;, &quot;name&quot;: &quot;chaincode&quot;, &quot;version&quot;: &quot;&quot; &#125;, &quot;timeout&quot;: 0 &#125; &#125; &#125;, &quot;action&quot;: &#123; &quot;proposal_response_payload&quot;: &#123; &quot;proposal_hash&quot;: &quot;932fb85e4b503cfdf2efbd8b9f45df5240da040cacd4c7970659263633c3afc3&quot;, &quot;extension&quot;: &#123; &quot;results&quot;: &#123; &quot;data_model&quot;: 0, &quot;ns_rwset&quot;: [&#123; &quot;namespace&quot;: &quot;chaincode&quot;, &quot;rwset&quot;: &#123; &quot;reads&quot;: [], &quot;range_queries_info&quot;: [], &quot;writes&quot;: [&#123; &quot;key&quot;: &quot;\\u0000neil\\u0000store\\u0000200\\u0000&quot;, &quot;is_delete&quot;: false, &quot;value&quot;: &quot;&#123;\\&quot;username\\&quot;:\\&quot;neil\\&quot;,\\&quot;action\\&quot;:\\&quot;store\\&quot;,\\&quot;money\\&quot;:\\&quot;200\\&quot;&#125;&quot; &#125;], &quot;metadata_writes&quot;: [] &#125;, &quot;collection_hashed_rwset&quot;: [] &#125;, &#123; &quot;namespace&quot;: &quot;lscc&quot;, &quot;rwset&quot;: &#123; &quot;reads&quot;: [&#123; &quot;key&quot;: &quot;chaincode&quot;, &quot;version&quot;: &#123; &quot;block_num&quot;: &quot;5&quot;, &quot;tx_num&quot;: &quot;0&quot; &#125; &#125;], &quot;range_queries_info&quot;: [], &quot;writes&quot;: [], &quot;metadata_writes&quot;: [] &#125;, &quot;collection_hashed_rwset&quot;: [] &#125;] &#125;, &quot;events&quot;: &#123; &quot;chaincode_id&quot;: &quot;&quot;, &quot;tx_id&quot;: &quot;&quot;, &quot;event_name&quot;: &quot;&quot;, &quot;payload&quot;: &#123; &quot;type&quot;: &quot;Buffer&quot;, &quot;data&quot;: [] &#125; &#125;, &quot;response&quot;: &#123; &quot;status&quot;: 200, &quot;message&quot;: &quot;&quot;, &quot;payload&quot;: &quot;&quot; &#125;, &quot;chaincode_id&quot;: &#123; &quot;path&quot;: &quot;&quot;, &quot;name&quot;: &quot;chaincode&quot;, &quot;version&quot;: &quot;1.0&quot; &#125; &#125; &#125;, &quot;endorsements&quot;: [&#123; &quot;endorser&quot;: &#123; &quot;Mspid&quot;: &quot;org1&quot;, &quot;IdBytes&quot;: &quot;-----BEGIN CERTIFICATE-----\\nMIICGTCCAcCgAwIBAgIRAP5eKKLGhfTuzLVPIrPcbTwwCgYIKoZIzj0EAwIwczEL\\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh\\nLm9yZzEuZXhhbXBsZS5jb20wHhcNMjEwMTEwMTA1NTAwWhcNMzEwMTA4MTA1NTAw\\nWjBbMQswCQ1YDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN\\nU2FuIEZyYW5jaXNjbzEfMB0GA1UEAxMWcGVlcjAub3JnMS5leGFtcGxlLmNvbTBZ\\nMBMGByqGSM49AgEGCCqGSM49AwEHA0IABFo3HMBdd10LjYeZwMtR59Byjjp11pd8\\nlvWaItRsbrwDvAugdGDZ3KC1FVHLhblCbFp4sDyRDPwJIDnXYIZUpFWjTTBLMA4G\\nA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIDY4fc4kUlHm\\nbvmklx4GCq2LvODXyEd0JUiNk6e+hTFrMAoGCCqGSM49BAMCA0cAMEQCIE0PYDKu\\ncPYusfTbqem0AwtrqMx/2kUSP9X6/HA5en0lAiB/YePKYDu91h336nNcxal98vNB\\nPKyoL+zVCRqL/MYvCQ==\\n-----END CERTIFICATE-----\\n&quot; &#125;, &quot;signature&quot;: &#123; &quot;type&quot;: &quot;Buffer&quot;, &quot;data&quot;: [48, 68, 2, 32, 14, 77, 226, 146, 105, 55, 164, 194, 11, 71, 51, 147, 63, 74, 207, 104, 106, 187, 117, 175, 187, 194, 244, 165, 25, 132, 52, 8, 190, 217, 81, 46, 2, 32, 22, 123, 212, 121, 242, 138, 121, 213, 55, 113, 46, 11, 23, 119, 148, 62, 172, 83, 199, 24, 133, 151, 60, 144, 177, 255, 65, 182, 177, 225, 0, 222] &#125; &#125;] &#125; &#125; &#125;] &#125; &#125; &#125;] &#125;, &quot;metadata&quot;: &#123; &quot;metadata&quot;: [&#123; &quot;value&quot;: &quot;\\n\\u0002\\b\\u0003&quot;, &quot;signatures&quot;: [&#123; &quot;signature_header&quot;: &#123; &quot;creator&quot;: &#123; &quot;Mspid&quot;: &quot;orderer.example.com&quot;, &quot;IdBytes&quot;: &quot;-----BEGIN CERTIFICATE-----\\nMIICDTCCAbOgAwIBAgIRAKZzKwIm1fXv9TbfsLSlJpUwCgYIKoZIzj0EAwIwaTEL\\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\\ncmFuY2lzY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRcwFQYDVQQDEw5jYS5leGFt\\ncGxlLmNvbTAeFw0yMTAxMTAxMDU1MDBaFw0zMTAxMDgxMDU1MDBaMFgxCzAJBgNV\\nBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNp\\nc2NvMRwwGgYDVQQDExNvcmRlcmVyLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYI\\nKoZIzj0DAQcDQgAEYh4Kui3YB02J9uUjX7+nn+l5ZT6DFWXjhB6X3fjUjowvySzf\\nfqn4s95o6qc0jYCaiC47cfUlJKvlPsBQX8XzyKNNMEswDgYDVR0PAQH/BAQDAgeA\\nMAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAg1HCS4tEmcKJX2ttGPCY4mw2VSA5lP\\nkVeYrnAulge4U0gwCgYIKoZIzj0EAwIDSAAwRQIhAJQom8NqJdKvG3uYkbcuFRbx\\nUxVltC+/OdqLZ2ByCVWzAiAv0mGOCKPogI1QZdowWXsHtS9bZw3ymtwVToLXI+zP\\nzg==\\n-----END CERTIFICATE-----\\n&quot; &#125;, &quot;nonce&quot;: &#123; &quot;type&quot;: &quot;Buffer&quot;, &quot;data&quot;: [32, 137, 232, 144, 240, 168, 86, 24, 236, 47, 151, 23, 182, 223, 129, 176, 92, 209, 74, 104, 78, 83, 86, 125] &#125; &#125;, &quot;signature&quot;: &#123; &quot;type&quot;: &quot;Buffer&quot;, &quot;data&quot;: [48, 69, 2, 33, 0, 159, 188, 112, 227, 84, 54, 225, 211, 227, 157, 120, 16, 218, 64, 137, 137, 94, 9, 217, 83, 249, 31, 24, 66, 75, 78, 14, 219, 182, 220, 75, 223, 2, 32, 106, 39, 131, 38, 77, 200, 222, 147, 195, 62, 173, 63, 254, 133, 174, 73, 161, 75, 40, 248, 173, 62, 83, 56, 141, 99, 162, 94, 181, 72, 68, 188] &#125; &#125;] &#125;, &#123; &quot;value&quot;: &#123; &quot;index&quot;: &quot;3&quot; &#125;, &quot;signatures&quot;: [] &#125;, [0] ] &#125;&#125; 实际上也是为了说明上面提到的 header，data，metadata 这三个结构。 Block Header区块结构（Go common.Block） 12345678type Block struct &#123; Header *BlockHeader `protobuf:&quot;bytes,1,opt,name=header,proto3&quot; json:&quot;header,omitempty&quot;` Data *BlockData `protobuf:&quot;bytes,2,opt,name=data,proto3&quot; json:&quot;data,omitempty&quot;` Metadata *BlockMetadata `protobuf:&quot;bytes,3,opt,name=metadata,proto3&quot; json:&quot;metadata,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; Header 12345678type BlockHeader struct &#123; Number uint64 `protobuf:&quot;varint,1,opt,name=number,proto3&quot; json:&quot;number,omitempty&quot;` PreviousHash []byte `protobuf:&quot;bytes,2,opt,name=previous_hash,json=previousHash,proto3&quot; json:&quot;previous_hash,omitempty&quot;` DataHash []byte `protobuf:&quot;bytes,3,opt,name=data_hash,json=dataHash,proto3&quot; json:&quot;data_hash,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; 区块头包含三个字段，Number（当前区块号）、PreviousHash（前一个区块头哈希）、DataHash（当前区块的数据哈希）。这个 DataHash 并不是当前区块的 Hash 值，只是当前区块数据体的 Hash ，所有我们要是计算当前区块的 Hash 就要自己进行一个计算。 计算过程很简单： 12345678910111213141516171819func GetBlockHash(blockHeader *common.BlockHeader) []byte &#123; rawBlockHeader := models.BlockHeader&#123; Number: int8(blockHeader.Number), PreviousHash: blockHeader.PreviousHash, DataHash: blockHeader.DataHash, &#125; data, err := asn1.Marshal(rawBlockHeader) if err != nil &#123; log.Printf(&quot;Failed to GetBlockHash : %s \\n&quot;, err) &#125; h := sha256.New() h.Write(data) byteHash := h.Sum(nil) return byteHash&#125; 这样的话，就可以获取到了当前区块的 Hash。 Block Data还是一样先看 SDK 里面定义的情况： 123456type BlockData struct &#123; Data [][]byte `protobuf:&quot;bytes,1,rep,name=data,proto3&quot; json:&quot;data,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; 话说我也不知道为什么 Data 里面放的数据字段直接就对应上了 Envelope 这个数据结构，但是这个 Envelope 就是一种展示交易信息的结构： “Envelope wraps a Payload with a signature so that the message may be authenticated” 官方文档就来了这样的一句，多少有点。还是根据上面的那个结构图吧，确实有用只能说。 123456789type Envelope struct &#123; // A marshaled Payload Payload []byte `protobuf:&quot;bytes,1,opt,name=payload,proto3&quot; json:&quot;payload,omitempty&quot;` // A signature by the creator specified in the Payload header Signature []byte `protobuf:&quot;bytes,2,opt,name=signature,proto3&quot; json:&quot;signature,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; 知道这个结构里面放着的是交易数据就可以了。。。 交易信息包括两个字段，Signature（交易发送者的签名）、Payload（数据载荷）。Signature是一个 buffer 数组类型的签名数据，并无其他可用信息，主要分析Payload数据载荷字段部分。 123456789type Payload struct &#123; // Header is included to provide identity and prevent replay Header *Header `protobuf:&quot;bytes,1,opt,name=header,proto3&quot; json:&quot;header,omitempty&quot;` // Data, the encoding of which is defined by the type in the header Data []byte `protobuf:&quot;bytes,2,opt,name=data,proto3&quot; json:&quot;data,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; Palyload 中包含了Header 和 Data 两个字段，其中 Header 中又包含了 ChannelHeader 和 SignatureHeader 1234567type Header struct &#123; ChannelHeader []byte `protobuf:&quot;bytes,1,opt,name=channel_header,json=channelHeader,proto3&quot; json:&quot;channel_header,omitempty&quot;` SignatureHeader []byte `protobuf:&quot;bytes,2,opt,name=signature_header,json=signatureHeader,proto3&quot; json:&quot;signature_header,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; 具体的一个介绍： ChannelHeader ： type（头类型） version（版本） timestamp（时间戳，即交易产生时间） channel_id（通道id） tx_id（交易id，即交易哈希） epoch（时期，该字段当前未使用） extension（可附加的扩展） typeString（类型字符串，主要包括 MESSAGE、CONFIG（表示当前块为区块链配置块）、CONFIG_UPDATE、ENDORSER_TRANSACTION（表示当前块为区块链正常交易块，大多数区块都为此类型）、ORDERER_TRANSACTION、DELIVER_SEEK_INFO、CHAINCODE_PACKAGE等类型）。 SignatureHeader ： creator（交易创建者的信息）包括创建者的证书和Mspid（成员服务提供者的身份证书) ，可通过msp.SerializedIdentity解析。 nonce（随机数） Payload 之中的 Data 字段包含了所有交易的数据以及链码的调用和响应数据。可以把这个数据解析为 peer 里面的 Transaction。 12345678type Transaction struct &#123; // The payload is an array of TransactionAction. An array is necessary to // accommodate multiple actions per transaction Actions []*TransactionAction `protobuf:&quot;bytes,1,rep,name=actions,proto3&quot; json:&quot;actions,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; 这里面的 Actions 就是一个交易的动作集合。 12345678910type TransactionAction struct &#123; // The header of the proposal action, which is the proposal header Header []byte `protobuf:&quot;bytes,1,opt,name=header,proto3&quot; json:&quot;header,omitempty&quot;` // The payload of the action as defined by the type in the header For // chaincode, it&#x27;s the bytes of ChaincodeActionPayload Payload []byte `protobuf:&quot;bytes,2,opt,name=payload,proto3&quot; json:&quot;payload,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; Header： 和SignatureHeader差不多，包含了用于提交交易的身份详细信息。 Payload： 可以通过ChainCodeActionPayload解析（包含着一些交易提案一类的信息）。 1234567891011121314151617type ChaincodeActionPayload struct &#123; // This field contains the bytes of the ChaincodeProposalPayload message from // the original invocation (essentially the arguments) after the application // of the visibility function. The main visibility modes are &quot;full&quot; (the // entire ChaincodeProposalPayload message is included here), &quot;hash&quot; (only // the hash of the ChaincodeProposalPayload message is included) or // &quot;nothing&quot;. This field will be used to check the consistency of // ProposalResponsePayload.proposalHash. For the CHAINCODE type, // ProposalResponsePayload.proposalHash is supposed to be H(ProposalHeader || // f(ChaincodeProposalPayload)) where f is the visibility function. ChaincodeProposalPayload []byte `` /* 135-byte string literal not displayed */ // The list of actions to apply to the ledger Action *ChaincodeEndorsedAction `protobuf:&quot;bytes,2,opt,name=action,proto3&quot; json:&quot;action,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; 1234567891011121314type ChaincodeProposalPayload struct &#123; // Input contains the arguments for this invocation. If this invocation // deploys a new chaincode, ESCC/VSCC are part of this field. // This is usually a marshaled ChaincodeInvocationSpec Input []byte `protobuf:&quot;bytes,1,opt,name=input,proto3&quot; json:&quot;input,omitempty&quot;` // TransientMap contains data (e.g. cryptographic material) that might be used // to implement some form of application-level confidentiality. The contents // of this field are supposed to always be omitted from the transaction and // excluded from the ledger. TransientMap map[string][]byte `` /* 165-byte string literal not displayed */ XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; 包含了调用chaincode时的输入参数等，Input：可以通过ChaincodeInvocationSpec解析 12345678910111213141516type ChaincodeInvocationSpec struct &#123; ChaincodeSpec *ChaincodeSpec `protobuf:&quot;bytes,1,opt,name=chaincode_spec,json=chaincodeSpec,proto3&quot; json:&quot;chaincode_spec,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125;type ChaincodeSpec struct &#123; Type ChaincodeSpec_Type `protobuf:&quot;varint,1,opt,name=type,proto3,enum=protos.ChaincodeSpec_Type&quot; json:&quot;type,omitempty&quot;` ChaincodeId *ChaincodeID `protobuf:&quot;bytes,2,opt,name=chaincode_id,json=chaincodeId,proto3&quot; json:&quot;chaincode_id,omitempty&quot;` Input *ChaincodeInput `protobuf:&quot;bytes,3,opt,name=input,proto3&quot; json:&quot;input,omitempty&quot;` Timeout int32 `protobuf:&quot;varint,4,opt,name=timeout,proto3&quot; json:&quot;timeout,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; 携带链码函数及其参数。 等等！ 回到 ChaincodeActionPayload.Action。 可通过 ChaincodeEndorsedAction 解析，包含 Proposal Hash 及调用链码时的 Read/Write 的交易信息 123456789101112type ChaincodeEndorsedAction struct &#123; // This is the bytes of the ProposalResponsePayload message signed by the // endorsers. Recall that for the CHAINCODE type, the // ProposalResponsePayload&#x27;s extenstion field carries a ChaincodeAction ProposalResponsePayload []byte `` /* 132-byte string literal not displayed */ // The endorsement of the proposal, basically the endorser&#x27;s signature over // proposalResponsePayload Endorsements []*Endorsement `protobuf:&quot;bytes,2,rep,name=endorsements,proto3&quot; json:&quot;endorsements,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; ChaincodeEndorsedAction 携带有关特定提案背书的信息。 Endorsements 该字段包含背书者信息数组，每个背书者包含MspId、证书和此次背书的签名signature。 1234567891011121314151617type ProposalResponsePayload struct &#123; // Hash of the proposal that triggered this response. The hash is used to // link a response with its proposal, both for bookeeping purposes on an // asynchronous system and for security reasons (accountability, // non-repudiation). The hash usually covers the entire Proposal message // (byte-by-byte). ProposalHash []byte `protobuf:&quot;bytes,1,opt,name=proposal_hash,json=proposalHash,proto3&quot; json:&quot;proposal_hash,omitempty&quot;` // Extension should be unmarshaled to a type-specific message. The type of // the extension in any proposal response depends on the type of the proposal // that the client selected when the proposal was initially sent out. In // particular, this information is stored in the type field of a Header. For // chaincode, it&#x27;s a ChaincodeAction message Extension []byte `protobuf:&quot;bytes,2,opt,name=extension,proto3&quot; json:&quot;extension,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; ProposalResponsePayload 是提案响应的负载。此消息是客户端请求和背书人响应该请求的操作之间的“桥梁”。具体来说，对于链码，它包含提案的散列表示（proposalHash）和扩展字段内链码状态变化和事件的表示。 ProposalResponsePayload 字段包含链码模拟执行结果对KV类型状态数据库的读写集，包括 proposal_hash（背书哈希值） results（背书结果） data_model（数据模型，但含义未知，一般为0） ns_rwset（读写集数组）包含 namespace rwset包含 read（读集） writes（写集，包含键、值、删除标志） range_queries_info（范围查询信息） metadata_writes。 response（背书响应）包含 status（响应状态值） message（响应信息） payload（返回的数据，一般是查询时采用此字段）。 chaincode_id（链码信息） Extension可通过ChaincodeAction来解析，包含了Read/Write操作的交易 12345678910111213141516171819type ChaincodeAction struct &#123; // This field contains the read set and the write set produced by the // chaincode executing this invocation. Results []byte `protobuf:&quot;bytes,1,opt,name=results,proto3&quot; json:&quot;results,omitempty&quot;` // This field contains the event generated by the chaincode. // Only a single marshaled ChaincodeEvent is included. Events []byte `protobuf:&quot;bytes,2,opt,name=events,proto3&quot; json:&quot;events,omitempty&quot;` // This field contains the result of executing this invocation. Response *Response `protobuf:&quot;bytes,3,opt,name=response,proto3&quot; json:&quot;response,omitempty&quot;` // This field contains the ChaincodeID of executing this invocation. Endorser // will set it with the ChaincodeID called by endorser while simulating proposal. // Committer will validate the version matching with latest chaincode version. // Adding ChaincodeID to keep version opens up the possibility of multiple // ChaincodeAction per transaction. ChaincodeId *ChaincodeID `protobuf:&quot;bytes,4,opt,name=chaincode_id,json=chaincodeId,proto3&quot; json:&quot;chaincode_id,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; ChaincodeAction 包含执行的链码结果、响应和事件。 Results 可通过 TxReadWriteSet 解析 1234567type TxReadWriteSet struct &#123; DataModel TxReadWriteSet_DataModel `protobuf:&quot;varint,1,opt,name=data_model,json=dataModel,proto3,enum=rwset.TxReadWriteSet_DataModel&quot; json:&quot;data_model,omitempty&quot;` NsRwset []*NsReadWriteSet `protobuf:&quot;bytes,2,rep,name=ns_rwset,json=nsRwset,proto3&quot; json:&quot;ns_rwset,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; TxReadWriteSet 封装了一个事务的读写集 DataModel 指定数据模型的枚举值 ns_rwset 字段指定链码特定的读写集列表（每个链码一个）。 12345678type NsReadWriteSet struct &#123; Namespace string `protobuf:&quot;bytes,1,opt,name=namespace,proto3&quot; json:&quot;namespace,omitempty&quot;` Rwset []byte `protobuf:&quot;bytes,2,opt,name=rwset,proto3&quot; json:&quot;rwset,omitempty&quot;` CollectionHashedRwset []*CollectionHashedReadWriteSet `` /* 126-byte string literal not displayed */ XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; NsReadWriteSet 封装了链码的读写集。 123456789type KVRWSet struct &#123; Reads []*KVRead `protobuf:&quot;bytes,1,rep,name=reads,proto3&quot; json:&quot;reads,omitempty&quot;` RangeQueriesInfo []*RangeQueryInfo `protobuf:&quot;bytes,2,rep,name=range_queries_info,json=rangeQueriesInfo,proto3&quot; json:&quot;range_queries_info,omitempty&quot;` Writes []*KVWrite `protobuf:&quot;bytes,3,rep,name=writes,proto3&quot; json:&quot;writes,omitempty&quot;` MetadataWrites []*KVMetadataWrite `protobuf:&quot;bytes,4,rep,name=metadata_writes,json=metadataWrites,proto3&quot; json:&quot;metadata_writes,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; KVRWSet 封装了链码的读写集，该链码在 KV 或 Document 数据模型上运行此结构用于公共数据和私有数据。 到这我已经麻了，想看就看看，实在不行就找一份代码容易多了，艹。 Block MetaData元数据：和当前区块相关的元数据，用于描述 Data 的相关信息，包含排序节点的 MspId、证书和随机数，以及签名。 value 的 index 属性及一些其他的字段含义也不太清楚，但是这些信息大多是空值并且与区块链相关状态信息并不相关。元数据是用于编码块元数据的通用结构。 1234567type Metadata struct &#123; Value []byte `protobuf:&quot;bytes,1,opt,name=value,proto3&quot; json:&quot;value,omitempty&quot;` Signatures []*MetadataSignature `protobuf:&quot;bytes,2,rep,name=signatures,proto3&quot; json:&quot;signatures,omitempty&quot;` XXX_NoUnkeyedLiteral struct&#123;&#125; `json:&quot;-&quot;` XXX_unrecognized []byte `json:&quot;-&quot;` XXX_sizecache int32 `json:&quot;-&quot;`&#125; 结语我的项目：https://github.com/FuradWho/GoExplore 大致的 Fabric 区块一个结构就是这样了，我想只要一直对应最开始的那几个图就完事了，就可以大致的完成一个区块链浏览器的全部数据解析了。具体的可以看一下我的项目，虽然我也是借鉴了大佬们的想法 QAQ 。","categories":[{"name":"Hyperledger Fabric","slug":"Hyperledger-Fabric","permalink":"http://www.furadwho.top/categories/Hyperledger-Fabric/"}],"tags":[{"name":"Fabric","slug":"Fabric","permalink":"http://www.furadwho.top/tags/Fabric/"}]},{"title":"hexo 常用命令","slug":"hexo-常用命令","date":"2021-10-21T02:28:31.000Z","updated":"2021-10-21T02:47:38.813Z","comments":true,"path":"2021/10/21/hexo-常用命令/","link":"","permalink":"http://www.furadwho.top/2021/10/21/hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"常用 hexo 命令初始化命令123$ npm install hexo -g //安装hexo $ npm update hexo -g //更新hexo$ hexo init //初始化博客 命令简写123456$ hexo n &quot;博客名称&quot; = hexo new &quot;博客名称&quot; //新建一篇博客$ hexo g = hexo generate //生成页面$ hexo d = hexo deploy //部署 $ hexo new page &quot;name&quot; //新建页面$ hexo g -d //生成页面并部署$ hexo s = hexo server //启动服务器、本地预览 其它命令123456$ hexo server //hexo会监视文件变动并自动更新，无须重启服务器 $ hexo server -s //静态模式$ hexo server -p 5000 //更改端口$ hexo server -i 192.168.1.1 //自定义 IP地址$ hexo clean //清除缓存和已生成的静态文件，若是网页正常情况下可以忽略这条命令$ hexo help //帮助 博客头格式1234567# 通过如下字段,Hexo会自动添加博文分类和博文标签的相关配置---title: title # 添加博文标题categories: categories # 添加博文分类tags: tags # 添加博文标签---","categories":[{"name":"奇巧淫技","slug":"奇巧淫技","permalink":"http://www.furadwho.top/categories/%E5%A5%87%E5%B7%A7%E6%B7%AB%E6%8A%80/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.furadwho.top/tags/hexo/"}]},{"title":"一元线性回归及Java实现","slug":"一元线性回归及Java实现","date":"2021-08-15T13:03:44.000Z","updated":"2021-10-21T02:49:29.173Z","comments":true,"path":"2021/08/15/一元线性回归及Java实现/","link":"","permalink":"http://www.furadwho.top/2021/08/15/%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%8F%8AJava%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"一元线性回归及Java实现回归问题回归问题是研究自变量和因变量之间关系的一种预测模型技术。例如我们可以通过回归模型去预测房价与房子面积之间的关系，一个人每周花在微信上的时间和他微信好友数量之间的关系等。 回归模型定义了输入和输出的关系。输入为现有信息，输出为预测。 一个预测问题在回归模型下的解决步骤为： 构造训练集； 学习，得到输入输出间的关系； 预测，通过学习得到的关系预测输出。 线性回归假设要使用回归模型预测一个人每周花在微信上的时间和微信好友数量之间的关系，可以用如下的表达式表示： y=ax+b+e 其中，y是你每周需要花费在微信上的时间，x是你的微信好友数量，e是误差。对于误差e，它不是一个定值，有一对y和x，就有一个e，e的值满足正态分布。 使用最小二乘法拟合对于上面的样本集，我们尝试用y=ax+b+ey=ax+b+e去进行拟合，那么可以得到： ∣e∣=∣ax+b−y∣ 误差大小其实就是猜想的ax+bax+b的值和观测到的y值之间的差值。把所有的∣e∣∣e∣都求和，构造一个函数： Q=n∑(axi+b−yi)2 当QQ最小的时候，即可得到最佳拟合的直线。 编码实现首先构造一个类来存放记录： 12345678910111213141516171819public class DataNode &#123; private double x; private double y; public double getX() &#123; return x; &#125; public double getY() &#123; return y; &#125; public void setX(double x) &#123; this.x = x; &#125; public void setY(double y) &#123; this.y = y; &#125; public double getXY()&#123; return this.x * this.y; &#125;&#125; 然后构造MyLinearRegression类 12345678910111213141516171819202122232425262728293031public class MyLinearRegression &#123; private List&lt;DataNode&gt; list; private double alpha; private double beta; private double r; public MyLinearRegression(String path) throws IOException&#123; this.list = new ArrayList&lt;DataNode&gt;(); init(path); &#125; public double getAlpha() &#123; return alpha; &#125; public double getBeta() &#123; return beta; &#125; public double getR()&#123; return this.r; &#125; private void init(String path) throws IOException&#123; BufferedReader reader = new BufferedReader(new FileReader(new File(path))); String line = &quot;&quot;; while ((line = reader.readLine()) != null)&#123; String str[] = line.split(&quot;,&quot;); DataNode dataNode = new DataNode(); dataNode.setX(Double.parseDouble(str[0])); dataNode.setY(Double.parseDouble(str[1])); this.list.add(dataNode); &#125; reader.close(); &#125;&#125; 最后要根据读取到的数据去求alpha，beta和r的值。可以直接利用上面的公式： 1234567891011121314151617181920212223242526272829public void getAB()&#123; int n = list.size(); double sumX = 0; double sumY = 0; double sumXY = 0; double sumX2 = 0; for (DataNode dataNode : list)&#123; sumX += dataNode.getX(); sumY += dataNode.getY(); sumXY += dataNode.getXY(); sumX2 += Math.pow(dataNode.getX(), 2); &#125; this.alpha = (((sumY * sumX) / n) - sumXY) / (((sumX * sumX) / n) - sumX2); this.beta = (sumY - this.alpha * sumX) / n;&#125;public void getR2()&#123; double num = 0; double den = 0; double sumY = 0; for (DataNode dataNode : list)&#123; sumY += dataNode.getY(); &#125; double avgY = sumY / list.size(); for (DataNode dataNode : list)&#123; num += Math.pow((dataNode.getY() - (dataNode.getX() * this.alpha + beta)), 2); den += Math.pow((dataNode.getY() - avgY), 2); &#125; this.r = 1 - (num / den);&#125; 使用上述数据集拟合： 1234567891011public class Main &#123; public static void main(String args[]) throws IOException&#123; String path = &quot;test.txt&quot;; MyLinearRegression linearRegression = new MyLinearRegression(path); linearRegression.getAB(); linearRegression.getR2(); System.out.println(&quot;alpha = &quot; + linearRegression.getAlpha()); System.out.println(&quot;beta = &quot; + linearRegression.getBeta()); System.out.println(&quot;R2 = &quot; + linearRegression.getR()); &#125;&#125; 得到结果： 123alpha = 0.6058710840658103beta = 26.861280144241604R2 = 0.9001321912140731","categories":[{"name":"Machine learning","slug":"Machine-learning","permalink":"http://www.furadwho.top/categories/Machine-learning/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://www.furadwho.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"阅后即焚（一）","slug":"阅后即焚（一）","date":"2021-08-14T15:00:21.000Z","updated":"2021-10-21T02:52:16.801Z","comments":true,"path":"2021/08/14/阅后即焚（一）/","link":"","permalink":"http://www.furadwho.top/2021/08/14/%E9%98%85%E5%90%8E%E5%8D%B3%E7%84%9A%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"","text":"阅后即焚（一）生命只是一连串孤立的片刻，靠着回忆和幻想，许多意义浮现了，然后消失，消失之后又浮现。 ——普鲁斯特《追忆似水年华》 “おげんきですか？わたしはげんきです”，而病床上的少女藤井树也喃喃的问“おげんきですか？わたしはげんきです”。 我爱你，想着你久久无法忘怀！ 曾经一度被说像“春天小熊”而感动，原来是一只来自挪威森林的小熊。“春天的原野里，你一个人正走着，对面走来一只可爱的小熊，浑身的毛活像天鹅绒，眼睛圆鼓鼓的。它这么对你说道：‘你好，小姐，和我一块儿打滚玩儿好么？’接着，你就和小熊抱在一起，顺着长满三叶草的山坡咕噜咕噜滚下去，整整玩了一大天。”很喜欢这段渡边对绿子说的话，喜欢得不得了。 我在桌前静静地看着你，越来越喜欢，越来越依赖，无法失去！","categories":[{"name":"阅后即焚","slug":"阅后即焚","permalink":"http://www.furadwho.top/categories/%E9%98%85%E5%90%8E%E5%8D%B3%E7%84%9A/"}],"tags":[{"name":"emo","slug":"emo","permalink":"http://www.furadwho.top/tags/emo/"}]}],"categories":[{"name":"Hyperledger Fabric","slug":"Hyperledger-Fabric","permalink":"http://www.furadwho.top/categories/Hyperledger-Fabric/"},{"name":"区块链","slug":"区块链","permalink":"http://www.furadwho.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"},{"name":"奇巧淫技","slug":"奇巧淫技","permalink":"http://www.furadwho.top/categories/%E5%A5%87%E5%B7%A7%E6%B7%AB%E6%8A%80/"},{"name":"Machine learning","slug":"Machine-learning","permalink":"http://www.furadwho.top/categories/Machine-learning/"},{"name":"阅后即焚","slug":"阅后即焚","permalink":"http://www.furadwho.top/categories/%E9%98%85%E5%90%8E%E5%8D%B3%E7%84%9A/"}],"tags":[{"name":"Fabric","slug":"Fabric","permalink":"http://www.furadwho.top/tags/Fabric/"},{"name":"区块链","slug":"区块链","permalink":"http://www.furadwho.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"},{"name":"git","slug":"git","permalink":"http://www.furadwho.top/tags/git/"},{"name":"hexo","slug":"hexo","permalink":"http://www.furadwho.top/tags/hexo/"},{"name":"算法","slug":"算法","permalink":"http://www.furadwho.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"emo","slug":"emo","permalink":"http://www.furadwho.top/tags/emo/"}]}