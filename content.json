{"meta":{"title":"The world of Furad","subtitle":"","description":"有关于个人的一些奇思妙想吧","author":"Furad","url":"http://furadwho.top","root":"/"},"pages":[{"title":"书单","date":"2021-10-20T14:28:03.702Z","updated":"2021-10-20T14:28:03.702Z","comments":false,"path":"books/index.html","permalink":"http://furadwho.top/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2021-10-20T14:28:03.702Z","updated":"2021-10-20T14:28:03.702Z","comments":false,"path":"about/index.html","permalink":"http://furadwho.top/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"404 Not Found：该页无法显示","date":"2021-10-20T14:28:03.701Z","updated":"2021-10-20T14:28:03.701Z","comments":false,"path":"/404.html","permalink":"http://furadwho.top/404.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-10-20T14:28:03.703Z","updated":"2021-10-20T14:28:03.703Z","comments":true,"path":"links/index.html","permalink":"http://furadwho.top/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-10-20T14:28:03.704Z","updated":"2021-10-20T14:28:03.704Z","comments":false,"path":"tags/index.html","permalink":"http://furadwho.top/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-10-20T14:28:03.702Z","updated":"2021-10-20T14:28:03.702Z","comments":false,"path":"categories/index.html","permalink":"http://furadwho.top/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-10-20T14:28:03.703Z","updated":"2021-10-20T14:28:03.703Z","comments":false,"path":"repository/index.html","permalink":"http://furadwho.top/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"一元线性回归及Java实现","slug":"一元线性回归及Java实现","date":"2021-08-15T13:03:44.000Z","updated":"2021-08-15T13:09:29.256Z","comments":true,"path":"2021/08/15/一元线性回归及Java实现/","link":"","permalink":"http://furadwho.top/2021/08/15/%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%8F%8AJava%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"一元线性回归及Java实现回归问题回归问题是研究自变量和因变量之间关系的一种预测模型技术。例如我们可以通过回归模型去预测房价与房子面积之间的关系，一个人每周花在微信上的时间和他微信好友数量之间的关系等。 回归模型定义了输入和输出的关系。输入为现有信息，输出为预测。 一个预测问题在回归模型下的解决步骤为： 构造训练集； 学习，得到输入输出间的关系； 预测，通过学习得到的关系预测输出。 线性回归假设要使用回归模型预测一个人每周花在微信上的时间和微信好友数量之间的关系，可以用如下的表达式表示： y=ax+b+e 其中，y是你每周需要花费在微信上的时间，x是你的微信好友数量，e是误差。对于误差e，它不是一个定值，有一对y和x，就有一个e，e的值满足正态分布。 使用最小二乘法拟合对于上面的样本集，我们尝试用y=ax+b+ey=ax+b+e去进行拟合，那么可以得到： ∣e∣=∣ax+b−y∣ 误差大小其实就是猜想的ax+bax+b的值和观测到的y值之间的差值。把所有的∣e∣∣e∣都求和，构造一个函数： Q=n∑(axi+b−yi)2 当QQ最小的时候，即可得到最佳拟合的直线。 编码实现首先构造一个类来存放记录： 12345678910111213141516171819public class DataNode &#123; private double x; private double y; public double getX() &#123; return x; &#125; public double getY() &#123; return y; &#125; public void setX(double x) &#123; this.x = x; &#125; public void setY(double y) &#123; this.y = y; &#125; public double getXY()&#123; return this.x * this.y; &#125;&#125; 然后构造MyLinearRegression类 12345678910111213141516171819202122232425262728293031public class MyLinearRegression &#123; private List&lt;DataNode&gt; list; private double alpha; private double beta; private double r; public MyLinearRegression(String path) throws IOException&#123; this.list = new ArrayList&lt;DataNode&gt;(); init(path); &#125; public double getAlpha() &#123; return alpha; &#125; public double getBeta() &#123; return beta; &#125; public double getR()&#123; return this.r; &#125; private void init(String path) throws IOException&#123; BufferedReader reader = new BufferedReader(new FileReader(new File(path))); String line = &quot;&quot;; while ((line = reader.readLine()) != null)&#123; String str[] = line.split(&quot;,&quot;); DataNode dataNode = new DataNode(); dataNode.setX(Double.parseDouble(str[0])); dataNode.setY(Double.parseDouble(str[1])); this.list.add(dataNode); &#125; reader.close(); &#125;&#125; 最后要根据读取到的数据去求alpha，beta和r的值。可以直接利用上面的公式： 1234567891011121314151617181920212223242526272829public void getAB()&#123; int n = list.size(); double sumX = 0; double sumY = 0; double sumXY = 0; double sumX2 = 0; for (DataNode dataNode : list)&#123; sumX += dataNode.getX(); sumY += dataNode.getY(); sumXY += dataNode.getXY(); sumX2 += Math.pow(dataNode.getX(), 2); &#125; this.alpha = (((sumY * sumX) / n) - sumXY) / (((sumX * sumX) / n) - sumX2); this.beta = (sumY - this.alpha * sumX) / n;&#125;public void getR2()&#123; double num = 0; double den = 0; double sumY = 0; for (DataNode dataNode : list)&#123; sumY += dataNode.getY(); &#125; double avgY = sumY / list.size(); for (DataNode dataNode : list)&#123; num += Math.pow((dataNode.getY() - (dataNode.getX() * this.alpha + beta)), 2); den += Math.pow((dataNode.getY() - avgY), 2); &#125; this.r = 1 - (num / den);&#125; 使用上述数据集拟合： 1234567891011public class Main &#123; public static void main(String args[]) throws IOException&#123; String path = &quot;test.txt&quot;; MyLinearRegression linearRegression = new MyLinearRegression(path); linearRegression.getAB(); linearRegression.getR2(); System.out.println(&quot;alpha = &quot; + linearRegression.getAlpha()); System.out.println(&quot;beta = &quot; + linearRegression.getBeta()); System.out.println(&quot;R2 = &quot; + linearRegression.getR()); &#125;&#125; 得到结果： 123alpha = 0.6058710840658103beta = 26.861280144241604R2 = 0.9001321912140731","categories":[],"tags":[]},{"title":"我爱你","slug":"我爱你","date":"2021-08-14T15:00:21.000Z","updated":"2021-08-14T15:04:17.442Z","comments":true,"path":"2021/08/14/我爱你/","link":"","permalink":"http://furadwho.top/2021/08/14/%E6%88%91%E7%88%B1%E4%BD%A0/","excerpt":"","text":"我爱你 生命只是一连串孤立的片刻，靠着回忆和幻想，许多意义浮现了，然后消失，消失之后又浮现。 ——普鲁斯特《追忆似水年华》 “おげんきですか？わたしはげんきです”，而病床上的少女藤井树也喃喃的问“おげんきですか？わたしはげんきです”。 我爱你，想着你久久无法忘怀！ 曾经一度被说像“春天小熊”而感动，原来是一只来自挪威森林的小熊。“春天的原野里，你一个人正走着，对面走来一只可爱的小熊，浑身的毛活像天鹅绒，眼睛圆鼓鼓的。它这么对你说道：‘你好，小姐，和我一块儿打滚玩儿好么？’接着，你就和小熊抱在一起，顺着长满三叶草的山坡咕噜咕噜滚下去，整整玩了一大天。”很喜欢这段渡边对绿子说的话，喜欢得不得了。 我在桌前静静地看着你，越来越喜欢，越来越依赖，无法失去！","categories":[],"tags":[]}],"categories":[],"tags":[]}