<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://www.furadwho.top/atom.xml" rel="self"/>
  
  <link href="http://www.furadwho.top/"/>
  <updated>2021-10-25T13:44:37.231Z</updated>
  <id>http://www.furadwho.top/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fabric-Go-SDk 学习（一）</title>
    <link href="http://www.furadwho.top/2021/10/25/Fabric-Go-SDk-%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.furadwho.top/2021/10/25/Fabric-Go-SDk-%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-10-25T13:41:36.000Z</published>
    <updated>2021-10-25T13:44:37.231Z</updated>
    
    
    
    
    <category term="Go" scheme="http://www.furadwho.top/categories/Go/"/>
    
    
    <category term="Fabric" scheme="http://www.furadwho.top/tags/Fabric/"/>
    
  </entry>
  
  <entry>
    <title>阅后即焚（二）</title>
    <link href="http://www.furadwho.top/2021/10/25/%E9%98%85%E5%90%8E%E5%8D%B3%E7%84%9A%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.furadwho.top/2021/10/25/%E9%98%85%E5%90%8E%E5%8D%B3%E7%84%9A%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2021-10-25T06:28:43.000Z</published>
    <updated>2021-10-25T06:34:57.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阅后即焚（二）"><a href="#阅后即焚（二）" class="headerlink" title="阅后即焚（二）"></a>阅后即焚（二）</h1><p><img src="t013bded924a0683af3.jpg" alt="t013bded924a0683af3"></p><p>相寻梦里路，飞雨落花中。                   ——  晏几道</p><p>很满足现在的生活，虽然因为疫情导致不能够去自己想去的地方。但是，似乎每天就这样的和舒服的人一起聊聊天，吹吹牛逼，也是真的不错。昨天晚上做了美梦，好久没有像现在记住这个梦很清晰的感觉了，只能说“小小美梦，大大知足”了。我不算什么大报复的人，只想着平平淡淡就好了……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;阅后即焚（二）&quot;&gt;&lt;a href=&quot;#阅后即焚（二）&quot; class=&quot;headerlink&quot; title=&quot;阅后即焚（二）&quot;&gt;&lt;/a&gt;阅后即焚（二）&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;t013bded924a0683af3.jpg&quot; alt=&quot;t013bded92</summary>
      
    
    
    
    <category term="阅后即焚" scheme="http://www.furadwho.top/categories/%E9%98%85%E5%90%8E%E5%8D%B3%E7%84%9A/"/>
    
    
    <category term="emo" scheme="http://www.furadwho.top/tags/emo/"/>
    
  </entry>
  
  <entry>
    <title>Xshell、Idea与虚拟机Ubuntu连接</title>
    <link href="http://www.furadwho.top/2021/10/24/Xshell%E3%80%81Idea%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu%E8%BF%9E%E6%8E%A5/"/>
    <id>http://www.furadwho.top/2021/10/24/Xshell%E3%80%81Idea%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu%E8%BF%9E%E6%8E%A5/</id>
    <published>2021-10-23T16:31:39.000Z</published>
    <updated>2021-10-24T01:35:09.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Xshell、Idea与虚拟机Ubuntu连接"><a href="#Xshell、Idea与虚拟机Ubuntu连接" class="headerlink" title="Xshell、Idea与虚拟机Ubuntu连接"></a>Xshell、Idea与虚拟机Ubuntu连接</h1><h2 id="一、安装-Ubuntu-虚拟机"><a href="#一、安装-Ubuntu-虚拟机" class="headerlink" title="一、安装 Ubuntu 虚拟机"></a>一、安装 Ubuntu 虚拟机</h2><p>默认VMware的网路是NAT模式，保持不变即可。获取宿主机以及虚拟机 IP 地址。</p><h2 id="二、建立-IP-映射"><a href="#二、建立-IP-映射" class="headerlink" title="二、建立 IP 映射"></a>二、建立 IP 映射</h2><p>将<strong>宿主机</strong>和<strong>虚拟机</strong>的IP映射起来。</p><p>打开VMware的<strong>虚拟网络编辑器</strong>（编辑&gt;虚拟网络编辑器）：</p><p><img src="image-20211024092338034.png" alt="image-20211024092338034"></p><p>选择 <strong>VMnet8 <strong>，点击</strong>更改设置</strong></p><p><img src="image-20211024092359845.png" alt="image-20211024092359845"></p><p>选择 <strong>VMnet8</strong> ，点击 <strong>NAT 设置</strong></p><p><img src="image-20211024092422869.png" alt="image-20211024092422869"></p><p>点击<strong>添加</strong></p><p><img src="image-20211024092439004.png" alt="image-20211024092439004"></p><ol><li>主机端口，填写默认 22 即可</li><li>填入之前查到的虚拟机 IP 地址</li><li>虚拟机端口，填写默认的 22 即可</li></ol><p>相当于将 <strong>宿主机 IP （192.168.80.106:22）</strong> 与<strong>虚拟机 IP （192.168.240.129:22)</strong> 建立起了映射关系。</p><h2 id="三、配置虚拟机SSH"><a href="#三、配置虚拟机SSH" class="headerlink" title="三、配置虚拟机SSH"></a>三、配置虚拟机SSH</h2><ol><li><strong>安装openssh-client：</strong>sudo apt-get install openssh-client</li><li><strong>安装openssh-server：</strong>sudo apt-get install openssh-server</li><li><strong>启动ssh-server：</strong>sudo /etc/init.d/ssh restart</li><li><strong>确认ssh-server工作正常：</strong>netstat -tpl （看到ssh表示工作正常）</li></ol><h2 id="四、配置虚拟机防火墙"><a href="#四、配置虚拟机防火墙" class="headerlink" title="四、配置虚拟机防火墙"></a>四、配置虚拟机防火墙</h2><p>启用22端口并重启防火墙：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --permanent --add-port=22/tcp</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --reload</span></span><br></pre></td></tr></table></figure><p>或者直接关闭防火墙：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop firewalld.service</span></span><br></pre></td></tr></table></figure><h2 id="五、使用-shell-连接虚拟机"><a href="#五、使用-shell-连接虚拟机" class="headerlink" title="五、使用 shell 连接虚拟机"></a>五、使用 shell 连接虚拟机</h2><p><img src="image-20211024092805617.png" alt="image-20211024092805617"></p><h2 id="六、配置-Idea-连接虚拟机"><a href="#六、配置-Idea-连接虚拟机" class="headerlink" title="六、配置 Idea 连接虚拟机"></a>六、配置 Idea 连接虚拟机</h2><h3 id="在-Idea-上面点击如下菜单：Tools—Deployment—Configuration…"><a href="#在-Idea-上面点击如下菜单：Tools—Deployment—Configuration…" class="headerlink" title="在 Idea 上面点击如下菜单：Tools—Deployment—Configuration…"></a>在 Idea 上面点击如下菜单：Tools—Deployment—Configuration…</h3><p><img src="image-20211024093004450.png" alt="image-20211024093004450"></p><h3 id="新增一台虚拟机，输入名称，选择SFTP协议，输入IP地址、代码路径、账号密码，点击OK"><a href="#新增一台虚拟机，输入名称，选择SFTP协议，输入IP地址、代码路径、账号密码，点击OK" class="headerlink" title="新增一台虚拟机，输入名称，选择SFTP协议，输入IP地址、代码路径、账号密码，点击OK"></a>新增一台虚拟机，输入名称，选择SFTP协议，输入IP地址、代码路径、账号密码，点击OK</h3><p><img src="image-20211024093047226.png" alt="image-20211024093047226"></p><h3 id="点击Tools—Deployment—Browse-RemoteHost"><a href="#点击Tools—Deployment—Browse-RemoteHost" class="headerlink" title="点击Tools—Deployment—Browse RemoteHost"></a>点击Tools—Deployment—Browse RemoteHost</h3><p><img src="image-20211024093145068.png" alt="image-20211024093145068"></p><h3 id="右侧会出现对应的代码路径，修改完代码之后，可以点击右上角的upload图标，将代码上传到虚拟机"><a href="#右侧会出现对应的代码路径，修改完代码之后，可以点击右上角的upload图标，将代码上传到虚拟机" class="headerlink" title="右侧会出现对应的代码路径，修改完代码之后，可以点击右上角的upload图标，将代码上传到虚拟机"></a>右侧会出现对应的代码路径，修改完代码之后，可以点击右上角的upload图标，将代码上传到虚拟机</h3><p><img src="image-20211024093210893.png" alt="image-20211024093210893"></p><h3 id="点击Tools—Start-SSH-session…可以打开远程界面"><a href="#点击Tools—Start-SSH-session…可以打开远程界面" class="headerlink" title="点击Tools—Start SSH session…可以打开远程界面"></a>点击Tools—Start SSH session…可以打开远程界面</h3><p><img src="image-20211024093255417.png" alt="image-20211024093255417"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这样就可以在宿主机连接到虚拟机进行代码编辑，并且上传了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Xshell、Idea与虚拟机Ubuntu连接&quot;&gt;&lt;a href=&quot;#Xshell、Idea与虚拟机Ubuntu连接&quot; class=&quot;headerlink&quot; title=&quot;Xshell、Idea与虚拟机Ubuntu连接&quot;&gt;&lt;/a&gt;Xshell、Idea与虚拟机Ub</summary>
      
    
    
    
    <category term="奇巧淫技" scheme="http://www.furadwho.top/categories/%E5%A5%87%E5%B7%A7%E6%B7%AB%E6%8A%80/"/>
    
    
    <category term="ubuntu" scheme="http://www.furadwho.top/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>《鲨鱼：起点》二刷</title>
    <link href="http://www.furadwho.top/2021/10/23/%E3%80%8A%E9%B2%A8%E9%B1%BC%EF%BC%9A%E8%B5%B7%E7%82%B9%E3%80%8B%E4%BA%8C%E5%88%B7/"/>
    <id>http://www.furadwho.top/2021/10/23/%E3%80%8A%E9%B2%A8%E9%B1%BC%EF%BC%9A%E8%B5%B7%E7%82%B9%E3%80%8B%E4%BA%8C%E5%88%B7/</id>
    <published>2021-10-23T12:55:26.000Z</published>
    <updated>2021-10-23T13:57:09.346Z</updated>
    
    <content type="html"><![CDATA[<p><img src="image-20211023205618110.png" alt="image-20211023205618110"></p><h3 id="鲨鱼：起点-샤크-더-비기닝-2021"><a href="#鲨鱼：起点-샤크-더-비기닝-2021" class="headerlink" title="鲨鱼：起点 샤크: 더 비기닝 (2021)"></a>鲨鱼：起点 샤크: 더 비기닝 (2021)</h3><p>之前片荒的时候无意之中找到的一部韩国片子（还是漫改的），说实话，真论敢拍的话还得数大韩人民的电影。</p><p>从一开始的入坑韩国灾难片系列，像《流感》《潘多拉》之类，还有那些黑涩会片子，马东锡这种我觉得无敌的。就很少有觉得比较可以戳我点的韩国电影了。</p><p>这部片子总体上来说，故事情节也算是老套了。一个高中生因“校园霸凌”戳了对头的右眼，郎当入狱，被判了一个“杀人未遂”。同时，这不巧了，监狱里面有一个全国拳击冠军“哥”，在“哥”的带领之下，男主逐渐变得强大，一路打怪升级，最后打赢了对头。这种剧情确实感觉都已经被拍烂了，回想我当初为什么被这个片子戳到了，一方面应该就是韩国片的敢拍程度，真的算得上“拳拳到肉了”，相比于《悲伤》《少年的你》露骨程度已经超出了几个维度了。</p><p>在就可能是当时觉得，自己可能有的时候和里面的男主有点相似，不能说“校园霸凌”，只是觉得自己也想变得“强大”，至少不被人欺负，“想好好地做一个平凡人”。有的时候觉得，在当今这个社会，平平淡淡真的也是蛮难的。应该很多人都深有这种感受吧！所求平淡，又何来“平淡”……</p><p>片子里面有一句，算是最戳动我：</p><blockquote><p>鲨鱼因为没有鱼鰾，只要一刻不游动就会沉下去死掉</p><p>所以从出生到死亡，都要一刻不停地游动，不要停下！</p></blockquote><p>Over……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;image-20211023205618110.png&quot; alt=&quot;image-20211023205618110&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;鲨鱼：起点-샤크-더-비기닝-2021&quot;&gt;&lt;a href=&quot;#鲨鱼：起点-샤크-더-비기닝-2021&quot; cla</summary>
      
    
    
    
    <category term="电影" scheme="http://www.furadwho.top/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
    <category term="电影" scheme="http://www.furadwho.top/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>学了一个月，什么是Hyperledger Fabric</title>
    <link href="http://www.furadwho.top/2021/10/23/%E5%AD%A6%E4%BA%86%E4%B8%80%E4%B8%AA%E6%9C%88%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AFHyperledger-Fabric/"/>
    <id>http://www.furadwho.top/2021/10/23/%E5%AD%A6%E4%BA%86%E4%B8%80%E4%B8%AA%E6%9C%88%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AFHyperledger-Fabric/</id>
    <published>2021-10-23T07:06:01.000Z</published>
    <updated>2021-10-23T10:47:07.690Z</updated>
    
    
    
    
    <category term="Hyperledger Fabric" scheme="http://www.furadwho.top/categories/Hyperledger-Fabric/"/>
    
    
    <category term="Fabric" scheme="http://www.furadwho.top/tags/Fabric/"/>
    
  </entry>
  
  <entry>
    <title>学了两个月，什么是区块链</title>
    <link href="http://www.furadwho.top/2021/10/23/%E5%AD%A6%E4%BA%86%E4%B8%A4%E4%B8%AA%E6%9C%88%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AF%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    <id>http://www.furadwho.top/2021/10/23/%E5%AD%A6%E4%BA%86%E4%B8%A4%E4%B8%AA%E6%9C%88%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AF%E5%8C%BA%E5%9D%97%E9%93%BE/</id>
    <published>2021-10-23T07:05:01.000Z</published>
    <updated>2021-10-23T10:46:40.493Z</updated>
    
    
    
    
    <category term="区块链" scheme="http://www.furadwho.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="区块链" scheme="http://www.furadwho.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用操作</title>
    <link href="http://www.furadwho.top/2021/10/22/Git-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.furadwho.top/2021/10/22/Git-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2021-10-22T02:10:53.000Z</published>
    <updated>2021-10-23T09:01:37.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-常用操作"><a href="#Git-常用操作" class="headerlink" title="Git 常用操作"></a>Git 常用操作</h1><p>比较常用的一些 Git 操作，但是日常只需要记住几个就可以。最近实习公司里面一直使用的 SVN ，但是我还是更偏向 Git 这个工具，怎么说呢，能有个地方放着就行了，哈哈哈</p><p><img src="image-20211023163139712.png" alt="image-20211023163139712"></p><p>几个专用名词：</p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><h2 id="Git-学习"><a href="#Git-学习" class="headerlink" title="Git 学习"></a>Git 学习</h2><p>Git是一个分布式版本管理系统，是为了更好地管理Linux内核开发而创立的。</p><h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加 / 删除文件"></a>增加 / 删除文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># merge 用merge的git路线是跳跃的，如果版本回退你也找不到自己想要的版本</span></span><br><span class="line">$ git pull = git fetch + git merge FETCH_HEAD </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用rebase操作会更好一点，这样可以线性的看到每一次提交，并且没有增加提交节点</span></span><br><span class="line">$ git pull --rebase =  git fetch + git rebase FETCH_HEAD </span><br></pre></td></tr></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure><ul><li>执行 <code>git fetch origin master</code> 时，它的意思是从名为 <strong>origin</strong> 的远程上拉取名为 <strong>master</strong> 的分支到本地分支 <strong>origin/master</strong> 中。既然是拉取代码，当然需要同时指定远程名与分支名，所以分开写。</li><li>执行 <code>git merge origin/master</code> 时，它的意思是合并名为 <strong>origin/master</strong> 的分支到当前所在分支。既然是分支的合并，当然就与远程名没有直接的关系，所以没有出现远程名。需要指定的是被合并的分支。</li><li>执行 <code>git push origin master</code> 时，它的意思是推送本地的 <strong>master</strong> 分支到远程 <strong>origin</strong>，涉及到远程以及分支，当然也得分开写了。</li><li>还可以一次性拉取多个分支的代码：<code>git fetch origin master stable oldstable</code>；</li><li>也还可以一次性合并多个分支的代码：<code>git merge origin/master hotfix-2275 hotfix-2276 hotfix-2290</code>；</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git-常用操作&quot;&gt;&lt;a href=&quot;#Git-常用操作&quot; class=&quot;headerlink&quot; title=&quot;Git 常用操作&quot;&gt;&lt;/a&gt;Git 常用操作&lt;/h1&gt;&lt;p&gt;比较常用的一些 Git 操作，但是日常只需要记住几个就可以。最近实习公司里面一直使用的 SV</summary>
      
    
    
    
    <category term="奇巧淫技" scheme="http://www.furadwho.top/categories/%E5%A5%87%E5%B7%A7%E6%B7%AB%E6%8A%80/"/>
    
    
    <category term="git" scheme="http://www.furadwho.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Fabric 区块数据解析</title>
    <link href="http://www.furadwho.top/2021/10/21/Fabric-%E5%8C%BA%E5%9D%97%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.furadwho.top/2021/10/21/Fabric-%E5%8C%BA%E5%9D%97%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/</id>
    <published>2021-10-21T03:38:27.000Z</published>
    <updated>2021-10-23T06:57:16.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fabric-区块数据解析"><a href="#Fabric-区块数据解析" class="headerlink" title="Fabric 区块数据解析"></a>Fabric 区块数据解析</h1><p>这个文章主要是使用 Go 对于 Fabric 的区块数据进行解析。因为之前要搞一个在 Fabric 基础之上的区块链浏览器，使用的是 Fabric-Go-SDK ，就得对于他这区块数据进行一个解析，说实话，确实麻烦。</p><h2 id="区块分析"><a href="#区块分析" class="headerlink" title="区块分析"></a>区块分析</h2><p>首先，区块链之中的区块结构就是包含区块头，区块体。但是 Fabric 的区块数据结构有一些变化，看下面的图我们也能看出来，Block Header（区块头），Block Data（区块体，包含所有的交易信息），加上 Block MetaData（当前区块的相关元数据）。这些数据我们几乎都是可以通过解析进行获取到的。</p><p>英文的区块结构说明：</p><p><img src="1177632-20210201215309005-823518458.png" alt="1177632-20210201215309005-823518458"></p><p>中文的区块结构说明：</p><p><img src="1177632-20210201215345755-928464081.png" alt="1177632-20210201215345755-928464081"></p><p>数据结构：</p><img src="1177632-20210201215422417-1609853608.png" alt="1177632-20210201215422417-1609853608" style="zoom: 80%;" /> <p>在我的参考文档之中有个很长的 JSON 格式数据（勉强看一眼）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;header&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;number&quot;</span>: <span class="string">&quot;14&quot;</span>,</span><br><span class="line"><span class="attr">&quot;previous_hash&quot;</span>: <span class="string">&quot;057935b395be9d6757f61a62eea2fd5c37e7089f3c991a7a9a131aefb255d450&quot;</span>,</span><br><span class="line"><span class="attr">&quot;data_hash&quot;</span>: <span class="string">&quot;39ba8f0e54e75980414b301a343f42981ba63f8f105cd72d0e039010843aa920&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;data&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;signature&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Buffer&quot;</span>,</span><br><span class="line"><span class="attr">&quot;data&quot;</span>: [<span class="number">48</span>, <span class="number">68</span>, <span class="number">2</span>, <span class="number">32</span>, <span class="number">53</span>, <span class="number">212</span>, <span class="number">86</span>, <span class="number">141</span>, <span class="number">134</span>, <span class="number">170</span>, <span class="number">144</span>, <span class="number">75</span>, <span class="number">132</span>, <span class="number">68</span>, <span class="number">229</span>, <span class="number">103</span>, <span class="number">122</span>, <span class="number">240</span>, <span class="number">21</span>, <span class="number">201</span>, <span class="number">139</span>, <span class="number">191</span>, <span class="number">77</span>, <span class="number">193</span>, <span class="number">50</span>, <span class="number">192</span>, <span class="number">31</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">187</span>, <span class="number">65</span>, <span class="number">112</span>, <span class="number">239</span>, <span class="number">36</span>, <span class="number">205</span>, <span class="number">182</span>, <span class="number">2</span>, <span class="number">32</span>, <span class="number">98</span>, <span class="number">217</span>, <span class="number">249</span>, <span class="number">62</span>, <span class="number">93</span>, <span class="number">24</span>, <span class="number">158</span>, <span class="number">247</span>, <span class="number">180</span>, <span class="number">186</span>, <span class="number">122</span>, <span class="number">237</span>, <span class="number">141</span>, <span class="number">54</span>, <span class="number">228</span>, <span class="number">20</span>, <span class="number">218</span>, <span class="number">234</span>, <span class="number">24</span>, <span class="number">246</span>, <span class="number">118</span>, <span class="number">205</span>, <span class="number">134</span>, <span class="number">187</span>, <span class="number">250</span>, <span class="number">198</span>, <span class="number">255</span>, <span class="number">79</span>, <span class="number">129</span>, <span class="number">159</span>, <span class="number">164</span>, <span class="number">220</span>]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;payload&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;header&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;channel_header&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="number">3</span>,</span><br><span class="line"><span class="attr">&quot;version&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2021-01-10T12:01:29.673Z&quot;</span>,</span><br><span class="line"><span class="attr">&quot;channel_id&quot;</span>: <span class="string">&quot;common&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tx_id&quot;</span>: <span class="string">&quot;ff28b4847400b16742245590d908b57a3643e4cc62baf3264dd8751070342314&quot;</span>,</span><br><span class="line"><span class="attr">&quot;epoch&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line"><span class="attr">&quot;extension&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Buffer&quot;</span>,</span><br><span class="line"><span class="attr">&quot;data&quot;</span>: [<span class="number">18</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">9</span>, <span class="number">99</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">101</span>]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;typeString&quot;</span>: <span class="string">&quot;ENDORSER_TRANSACTION&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;signature_header&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;creator&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;Mspid&quot;</span>: <span class="string">&quot;org1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;IdBytes&quot;</span>: <span class="string">&quot;-----BEGIN CERTIFICATE-----\nMIICcTCCAhegAwIBAgIUbtNpC7qvKr1n5OxgOZiaBRu2VtgwCgYIKoZIzj0EAwIw\nczELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMT\nE2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMjEwMTEwMTE1NjAwWhcNMjIwMTEwMTIw\nMTAwWjAvMRwwDQYDVQQLEwZjbGllbnQwCwYDVQQLEwRvcmcxMQ8wDQYDVQQDEwZh\nZG1pbjEwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASlFdeOOyJRw4/25L62W/KA\nmYpCFsV0CwnezSVEuJL44vC0vqpYUlk1CdR1UO8bkcutgBHXsly+gWyH+GZtSD59X\no4HMMIHJMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBSu\nKGe8YTCjfa0+f+l0Q6Woq+S94zArBgNVHSMEJDAigCA2OH3OJFJR5m75pJceBgqt\ni7zg18hHdCVIjZOnvoUxazBdBggqAwQFBgcIAQRReyJhdHRycyI6eyJoZi5BZmZp\nbGlhdGlvbiI6Im9yZzEiLCJoZi5FbnJvbGxtZW50SUQiOiJhZG1pbjEiLCJoZi5U\neXBlIjoiY2xpZW50In19MAoGCCqGSM49BAMCA0gAMEUCIQCiNYmu/NaH/pBStOZf\nfa2OcoTmBsJvztFikt/+CGjZ0gIgUJd1Ay3vi1V/WNMoAxr/3uA84qwAP0TRwcQw\nIjyEzZA=\n-----END CERTIFICATE-----\n&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;nonce&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Buffer&quot;</span>,</span><br><span class="line"><span class="attr">&quot;data&quot;</span>: [<span class="number">217</span>, <span class="number">120</span>, <span class="number">226</span>, <span class="number">190</span>, <span class="number">89</span>, <span class="number">228</span>, <span class="number">29</span>, <span class="number">80</span>, <span class="number">164</span>, <span class="number">122</span>, <span class="number">27</span>, <span class="number">114</span>, <span class="number">128</span>, <span class="number">137</span>, <span class="number">117</span>, <span class="number">209</span>, <span class="number">53</span>, <span class="number">235</span>, <span class="number">81</span>, <span class="number">90</span>, <span class="number">147</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">218</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;actions&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;header&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;creator&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;Mspid&quot;</span>: <span class="string">&quot;org1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;IdBytes&quot;</span>: <span class="string">&quot;-----BEGIN CERTIFICATE-----\nMIICcTCCAhegAwIBAgIUbtNpC7qvKr1n5OxgOZiaBRu2VtgwCgYIKoZIzj0EAwIw\nczELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMT\nE2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMjEwMTEwMTE1NjAwWhcNMjIwMTEwMTIw\nMTAwWjAvMRwwDQYDVQQLEwZj1bGllbnQwCwYDVQQLEwRvcmcxMQ8wDQYDVQQDEwZh\nZG1pbjEwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASlFdeOOyJRw4/25L62W/KA\nmYpCFsV0CwnezSVEuJL44vC0vqpYUlk1CdRUO8bkcutgBHXsly+gWyH+GZtSD59X\no4HMMIHJMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBSu\nKGe8YTCjfa0+f+l0Q6Woq+S94zArBgNVHSMEJDAigCA2OH3OJFJR5m75pJceBgqt\ni7zg18hHdCVIjZOnvoUxazBdBggqAwQFBgcIAQRReyJhdHRycyI6eyJoZi5BZmZp\nbGlhdGlvbiI6Im9yZzEiLCJoZi5FbnJvbGxtZW50SUQiOiJhZG1pbjEiLCJoZi5U\neXBlIjoiY2xpZW50In19MAoGCCqGSM49BAMCA0gAMEUCIQCiNYmu/NaH/pBStOZf\nfa2OcoTmBsJvztFikt/+CGjZ0gIgUJd1Ay3vi1V/WNMoAxr/3uA84qwAP0TRwcQw\nIjyEzZA=\n-----END CERTIFICATE-----\n&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;nonce&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Buffer&quot;</span>,</span><br><span class="line"><span class="attr">&quot;data&quot;</span>: [<span class="number">217</span>, <span class="number">120</span>, <span class="number">226</span>, <span class="number">190</span>, <span class="number">89</span>, <span class="number">228</span>, <span class="number">29</span>, <span class="number">80</span>, <span class="number">164</span>, <span class="number">122</span>, <span class="number">27</span>, <span class="number">114</span>, <span class="number">128</span>, <span class="number">137</span>, <span class="number">117</span>, <span class="number">209</span>, <span class="number">53</span>, <span class="number">235</span>, <span class="number">81</span>, <span class="number">90</span>, <span class="number">147</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">218</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;payload&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;chaincode_proposal_payload&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;input&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;chaincode_spec&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">&quot;typeString&quot;</span>: <span class="string">&quot;GOLANG&quot;</span>,</span><br><span class="line"><span class="attr">&quot;input&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;args&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Buffer&quot;</span>,</span><br><span class="line"><span class="attr">&quot;data&quot;</span>: [<span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>]</span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Buffer&quot;</span>,</span><br><span class="line"><span class="attr">&quot;data&quot;</span>: [<span class="number">123</span>, <span class="number">34</span>, <span class="number">117</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">110</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">34</span>, <span class="number">12</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">34</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">34</span>, <span class="number">58</span>, <span class="number">34</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">34</span>, <span class="number">44</span>, <span class="number">34</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">121</span>, <span class="number">34</span>, <span class="number">58</span>, <span class="number">34</span>, <span class="number">50</span>, <span class="number">48</span>, <span class="number">48</span>, <span class="number">34</span>, <span class="number">125</span>]</span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">&quot;decorations&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;chaincode_id&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;path&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;chaincode&quot;</span>,</span><br><span class="line"><span class="attr">&quot;version&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;timeout&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;action&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;proposal_response_payload&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;proposal_hash&quot;</span>: <span class="string">&quot;932fb85e4b503cfdf2efbd8b9f45df5240da040cacd4c7970659263633c3afc3&quot;</span>,</span><br><span class="line"><span class="attr">&quot;extension&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;results&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;data_model&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;ns_rwset&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;namespace&quot;</span>: <span class="string">&quot;chaincode&quot;</span>,</span><br><span class="line"><span class="attr">&quot;rwset&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;reads&quot;</span>: [],</span><br><span class="line"><span class="attr">&quot;range_queries_info&quot;</span>: [],</span><br><span class="line"><span class="attr">&quot;writes&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;key&quot;</span>: <span class="string">&quot;\u0000neil\u0000store\u0000200\u0000&quot;</span>,</span><br><span class="line"><span class="attr">&quot;is_delete&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;value&quot;</span>: <span class="string">&quot;&#123;\&quot;username\&quot;:\&quot;neil\&quot;,\&quot;action\&quot;:\&quot;store\&quot;,\&quot;money\&quot;:\&quot;200\&quot;&#125;&quot;</span></span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">&quot;metadata_writes&quot;</span>: []</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;collection_hashed_rwset&quot;</span>: []</span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">&quot;namespace&quot;</span>: <span class="string">&quot;lscc&quot;</span>,</span><br><span class="line"><span class="attr">&quot;rwset&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;reads&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;key&quot;</span>: <span class="string">&quot;chaincode&quot;</span>,</span><br><span class="line"><span class="attr">&quot;version&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;block_num&quot;</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tx_num&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">&quot;range_queries_info&quot;</span>: [],</span><br><span class="line"><span class="attr">&quot;writes&quot;</span>: [],</span><br><span class="line"><span class="attr">&quot;metadata_writes&quot;</span>: []</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;collection_hashed_rwset&quot;</span>: []</span><br><span class="line">&#125;]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;events&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;chaincode_id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;tx_id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;event_name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;payload&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Buffer&quot;</span>,</span><br><span class="line"><span class="attr">&quot;data&quot;</span>: []</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;response&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;status&quot;</span>: <span class="number">200</span>,</span><br><span class="line"><span class="attr">&quot;message&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;payload&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;chaincode_id&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;path&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;chaincode&quot;</span>,</span><br><span class="line"><span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;endorsements&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;endorser&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;Mspid&quot;</span>: <span class="string">&quot;org1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;IdBytes&quot;</span>: <span class="string">&quot;-----BEGIN CERTIFICATE-----\nMIICGTCCAcCgAwIBAgIRAP5eKKLGhfTuzLVPIrPcbTwwCgYIKoZIzj0EAwIwczEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh\nLm9yZzEuZXhhbXBsZS5jb20wHhcNMjEwMTEwMTA1NTAwWhcNMzEwMTA4MTA1NTAw\nWjBbMQswCQ1YDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN\nU2FuIEZyYW5jaXNjbzEfMB0GA1UEAxMWcGVlcjAub3JnMS5leGFtcGxlLmNvbTBZ\nMBMGByqGSM49AgEGCCqGSM49AwEHA0IABFo3HMBdd10LjYeZwMtR59Byjjp11pd8\nlvWaItRsbrwDvAugdGDZ3KC1FVHLhblCbFp4sDyRDPwJIDnXYIZUpFWjTTBLMA4G\nA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIDY4fc4kUlHm\nbvmklx4GCq2LvODXyEd0JUiNk6e+hTFrMAoGCCqGSM49BAMCA0cAMEQCIE0PYDKu\ncPYusfTbqem0AwtrqMx/2kUSP9X6/HA5en0lAiB/YePKYDu91h336nNcxal98vNB\nPKyoL+zVCRqL/MYvCQ==\n-----END CERTIFICATE-----\n&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;signature&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Buffer&quot;</span>,</span><br><span class="line"><span class="attr">&quot;data&quot;</span>: [<span class="number">48</span>, <span class="number">68</span>, <span class="number">2</span>, <span class="number">32</span>, <span class="number">14</span>, <span class="number">77</span>, <span class="number">226</span>, <span class="number">146</span>, <span class="number">105</span>, <span class="number">55</span>, <span class="number">164</span>, <span class="number">194</span>, <span class="number">11</span>, <span class="number">71</span>, <span class="number">51</span>, <span class="number">147</span>, <span class="number">63</span>, <span class="number">74</span>, <span class="number">207</span>, <span class="number">104</span>, <span class="number">106</span>, <span class="number">187</span>, <span class="number">117</span>, <span class="number">175</span>, <span class="number">187</span>, <span class="number">194</span>, <span class="number">244</span>, <span class="number">165</span>, <span class="number">25</span>, <span class="number">132</span>, <span class="number">52</span>, <span class="number">8</span>, <span class="number">190</span>, <span class="number">217</span>, <span class="number">81</span>, <span class="number">46</span>, <span class="number">2</span>, <span class="number">32</span>, <span class="number">22</span>, <span class="number">123</span>, <span class="number">212</span>, <span class="number">121</span>, <span class="number">242</span>, <span class="number">138</span>, <span class="number">121</span>, <span class="number">213</span>, <span class="number">55</span>, <span class="number">113</span>, <span class="number">46</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">119</span>, <span class="number">148</span>, <span class="number">62</span>, <span class="number">172</span>, <span class="number">83</span>, <span class="number">199</span>, <span class="number">24</span>, <span class="number">133</span>, <span class="number">151</span>, <span class="number">60</span>, <span class="number">144</span>, <span class="number">177</span>, <span class="number">255</span>, <span class="number">65</span>, <span class="number">182</span>, <span class="number">177</span>, <span class="number">225</span>, <span class="number">0</span>, <span class="number">222</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;metadata&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;metadata&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;value&quot;</span>: <span class="string">&quot;\n\u0002\b\u0003&quot;</span>,</span><br><span class="line"><span class="attr">&quot;signatures&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;signature_header&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;creator&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;Mspid&quot;</span>: <span class="string">&quot;orderer.example.com&quot;</span>,</span><br><span class="line"><span class="attr">&quot;IdBytes&quot;</span>: <span class="string">&quot;-----BEGIN CERTIFICATE-----\nMIICDTCCAbOgAwIBAgIRAKZzKwIm1fXv9TbfsLSlJpUwCgYIKoZIzj0EAwIwaTEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRcwFQYDVQQDEw5jYS5leGFt\ncGxlLmNvbTAeFw0yMTAxMTAxMDU1MDBaFw0zMTAxMDgxMDU1MDBaMFgxCzAJBgNV\nBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNp\nc2NvMRwwGgYDVQQDExNvcmRlcmVyLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYI\nKoZIzj0DAQcDQgAEYh4Kui3YB02J9uUjX7+nn+l5ZT6DFWXjhB6X3fjUjowvySzf\nfqn4s95o6qc0jYCaiC47cfUlJKvlPsBQX8XzyKNNMEswDgYDVR0PAQH/BAQDAgeA\nMAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAg1HCS4tEmcKJX2ttGPCY4mw2VSA5lP\nkVeYrnAulge4U0gwCgYIKoZIzj0EAwIDSAAwRQIhAJQom8NqJdKvG3uYkbcuFRbx\nUxVltC+/OdqLZ2ByCVWzAiAv0mGOCKPogI1QZdowWXsHtS9bZw3ymtwVToLXI+zP\nzg==\n-----END CERTIFICATE-----\n&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;nonce&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Buffer&quot;</span>,</span><br><span class="line"><span class="attr">&quot;data&quot;</span>: [<span class="number">32</span>, <span class="number">137</span>, <span class="number">232</span>, <span class="number">144</span>, <span class="number">240</span>, <span class="number">168</span>, <span class="number">86</span>, <span class="number">24</span>, <span class="number">236</span>, <span class="number">47</span>, <span class="number">151</span>, <span class="number">23</span>, <span class="number">182</span>, <span class="number">223</span>, <span class="number">129</span>, <span class="number">176</span>, <span class="number">92</span>, <span class="number">209</span>, <span class="number">74</span>, <span class="number">104</span>, <span class="number">78</span>, <span class="number">83</span>, <span class="number">86</span>, <span class="number">125</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;signature&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Buffer&quot;</span>,</span><br><span class="line"><span class="attr">&quot;data&quot;</span>: [<span class="number">48</span>, <span class="number">69</span>, <span class="number">2</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">159</span>, <span class="number">188</span>, <span class="number">112</span>, <span class="number">227</span>, <span class="number">84</span>, <span class="number">54</span>, <span class="number">225</span>, <span class="number">211</span>, <span class="number">227</span>, <span class="number">157</span>, <span class="number">120</span>, <span class="number">16</span>, <span class="number">218</span>, <span class="number">64</span>, <span class="number">137</span>, <span class="number">137</span>, <span class="number">94</span>, <span class="number">9</span>, <span class="number">217</span>, <span class="number">83</span>, <span class="number">249</span>, <span class="number">31</span>, <span class="number">24</span>, <span class="number">66</span>, <span class="number">75</span>, <span class="number">78</span>, <span class="number">14</span>, <span class="number">219</span>, <span class="number">182</span>, <span class="number">220</span>, <span class="number">75</span>, <span class="number">223</span>, <span class="number">2</span>, <span class="number">32</span>, <span class="number">106</span>, <span class="number">39</span>, <span class="number">131</span>, <span class="number">38</span>, <span class="number">77</span>, <span class="number">200</span>, <span class="number">222</span>, <span class="number">147</span>, <span class="number">195</span>, <span class="number">62</span>, <span class="number">173</span>, <span class="number">63</span>, <span class="number">254</span>, <span class="number">133</span>, <span class="number">174</span>, <span class="number">73</span>, <span class="number">161</span>, <span class="number">75</span>, <span class="number">40</span>, <span class="number">248</span>, <span class="number">173</span>, <span class="number">62</span>, <span class="number">83</span>, <span class="number">56</span>, <span class="number">141</span>, <span class="number">99</span>, <span class="number">162</span>, <span class="number">94</span>, <span class="number">181</span>, <span class="number">72</span>, <span class="number">68</span>, <span class="number">188</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">&quot;value&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;index&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;signatures&quot;</span>: []</span><br><span class="line">&#125;,</span><br><span class="line">[<span class="number">0</span>]</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上也是为了说明上面提到的 header，data，metadata 这三个结构。</p><h2 id="Block-Header"><a href="#Block-Header" class="headerlink" title="Block Header"></a>Block Header</h2><p>区块结构（Go common.Block）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Block <span class="keyword">struct</span> &#123;</span><br><span class="line">Header               *BlockHeader   <span class="string">`protobuf:&quot;bytes,1,opt,name=header,proto3&quot; json:&quot;header,omitempty&quot;`</span></span><br><span class="line">Data                 *BlockData     <span class="string">`protobuf:&quot;bytes,2,opt,name=data,proto3&quot; json:&quot;data,omitempty&quot;`</span></span><br><span class="line">Metadata             *BlockMetadata <span class="string">`protobuf:&quot;bytes,3,opt,name=metadata,proto3&quot; json:&quot;metadata,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125;       <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>         <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>          <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Header</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BlockHeader <span class="keyword">struct</span> &#123;</span><br><span class="line">Number               <span class="keyword">uint64</span>   <span class="string">`protobuf:&quot;varint,1,opt,name=number,proto3&quot; json:&quot;number,omitempty&quot;`</span></span><br><span class="line">PreviousHash         []<span class="keyword">byte</span>   <span class="string">`protobuf:&quot;bytes,2,opt,name=previous_hash,json=previousHash,proto3&quot; json:&quot;previous_hash,omitempty&quot;`</span></span><br><span class="line">DataHash             []<span class="keyword">byte</span>   <span class="string">`protobuf:&quot;bytes,3,opt,name=data_hash,json=dataHash,proto3&quot; json:&quot;data_hash,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125; <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>   <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>    <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区块头包含三个字段，<code>Number</code>（当前区块号）、<code>PreviousHash</code>（前一个区块头哈希）、<code>DataHash</code>（当前区块的数据哈希）。这个 DataHash 并不是当前区块的 Hash 值，只是当前区块数据体的 Hash ，所有我们要是计算当前区块的 Hash 就要自己进行一个计算。</p><p>计算过程很简单： </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetBlockHash</span><span class="params">(blockHeader *common.BlockHeader)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"></span><br><span class="line">  rawBlockHeader := models.BlockHeader&#123;</span><br><span class="line">     Number:       <span class="keyword">int8</span>(blockHeader.Number),</span><br><span class="line">     PreviousHash: blockHeader.PreviousHash,</span><br><span class="line">     DataHash:     blockHeader.DataHash,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  data, err := asn1.Marshal(rawBlockHeader) </span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">     log.Printf(<span class="string">&quot;Failed to GetBlockHash : %s \n&quot;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h := sha256.New()</span><br><span class="line">  h.Write(data)</span><br><span class="line">  byteHash := h.Sum(<span class="literal">nil</span>)</span><br><span class="line">  <span class="keyword">return</span> byteHash</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，就可以获取到了当前区块的 Hash。</p><h2 id="Block-Data"><a href="#Block-Data" class="headerlink" title="Block Data"></a>Block Data</h2><p>还是一样先看 SDK 里面定义的情况：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BlockData <span class="keyword">struct</span> &#123;</span><br><span class="line">Data                 [][]<span class="keyword">byte</span> <span class="string">`protobuf:&quot;bytes,1,rep,name=data,proto3&quot; json:&quot;data,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125; <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>   <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>    <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>话说我也不知道为什么 Data 里面放的数据字段直接就对应上了 Envelope 这个数据结构，但是这个 Envelope 就是一种展示交易信息的结构：</p><p><em>“Envelope wraps a Payload with a signature so that the message may be authenticated”</em></p><p>官方文档就来了这样的一句，多少有点。还是根据上面的那个结构图吧，确实有用只能说。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Envelope <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// A marshaled Payload</span></span><br><span class="line">Payload []<span class="keyword">byte</span> <span class="string">`protobuf:&quot;bytes,1,opt,name=payload,proto3&quot; json:&quot;payload,omitempty&quot;`</span></span><br><span class="line"><span class="comment">// A signature by the creator specified in the Payload header</span></span><br><span class="line">Signature            []<span class="keyword">byte</span>   <span class="string">`protobuf:&quot;bytes,2,opt,name=signature,proto3&quot; json:&quot;signature,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125; <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>   <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>    <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知道这个结构里面放着的是交易数据就可以了。。。</p><p>交易信息包括两个字段，<code>Signature</code>（交易发送者的签名）、<code>Payload</code>（数据载荷）。<code>Signature</code>是一个 buffer 数组类型的签名数据，并无其他可用信息，主要分析<code>Payload</code>数据载荷字段部分。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Payload <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Header is included to provide identity and prevent replay</span></span><br><span class="line">Header *Header <span class="string">`protobuf:&quot;bytes,1,opt,name=header,proto3&quot; json:&quot;header,omitempty&quot;`</span></span><br><span class="line"><span class="comment">// Data, the encoding of which is defined by the type in the header</span></span><br><span class="line">Data                 []<span class="keyword">byte</span>   <span class="string">`protobuf:&quot;bytes,2,opt,name=data,proto3&quot; json:&quot;data,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125; <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>   <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>    <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Palyload 中包含了Header 和 Data 两个字段，其中 Header 中又包含了 ChannelHeader 和 SignatureHeader</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Header <span class="keyword">struct</span> &#123;</span><br><span class="line">ChannelHeader        []<span class="keyword">byte</span>   <span class="string">`protobuf:&quot;bytes,1,opt,name=channel_header,json=channelHeader,proto3&quot; json:&quot;channel_header,omitempty&quot;`</span></span><br><span class="line">SignatureHeader      []<span class="keyword">byte</span>   <span class="string">`protobuf:&quot;bytes,2,opt,name=signature_header,json=signatureHeader,proto3&quot; json:&quot;signature_header,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125; <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>   <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>    <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的一个介绍：</p><ul><li>ChannelHeader ：<ul><li><code>type</code>（头类型）</li><li><code>version</code>（版本）</li><li><code>timestamp</code>（时间戳，即交易产生时间）</li><li><code>channel_id</code>（通道id）</li><li><code>tx_id</code>（交易id，即交易哈希）</li><li><code>epoch</code>（时期，该字段当前未使用）</li><li><code>extension</code>（可附加的扩展）</li><li><code>typeString</code>（类型字符串，主要包括 MESSAGE、CONFIG（表示当前块为区块链配置块）、CONFIG_UPDATE、ENDORSER_TRANSACTION（表示当前块为区块链正常交易块，大多数区块都为此类型）、ORDERER_TRANSACTION、DELIVER_SEEK_INFO、CHAINCODE_PACKAGE等类型）。</li></ul></li><li>SignatureHeader ：<ul><li><code>creator</code>（交易创建者的信息）包括创建者的证书和<code>Mspid</code>（成员服务提供者的身份证书) ，可通过msp.SerializedIdentity解析。</li><li><code>nonce</code>（随机数）</li></ul></li></ul><p>Payload 之中的 Data 字段包含了所有交易的数据以及链码的调用和响应数据。可以把这个数据解析为 peer 里面的 Transaction。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Transaction <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// The payload is an array of TransactionAction. An array is necessary to</span></span><br><span class="line"><span class="comment">// accommodate multiple actions per transaction</span></span><br><span class="line">Actions              []*TransactionAction <span class="string">`protobuf:&quot;bytes,1,rep,name=actions,proto3&quot; json:&quot;actions,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125;             <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>               <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>                <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面的 Actions 就是一个交易的动作集合。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TransactionAction <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// The header of the proposal action, which is the proposal header</span></span><br><span class="line">Header []<span class="keyword">byte</span> <span class="string">`protobuf:&quot;bytes,1,opt,name=header,proto3&quot; json:&quot;header,omitempty&quot;`</span></span><br><span class="line"><span class="comment">// The payload of the action as defined by the type in the header For</span></span><br><span class="line"><span class="comment">// chaincode, it&#x27;s the bytes of ChaincodeActionPayload</span></span><br><span class="line">Payload              []<span class="keyword">byte</span>   <span class="string">`protobuf:&quot;bytes,2,opt,name=payload,proto3&quot; json:&quot;payload,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125; <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>   <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>    <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Header： 和SignatureHeader差不多，包含了用于提交交易的身份详细信息。</p><p>Payload： 可以通过ChainCodeActionPayload解析（包含着一些交易提案一类的信息）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ChaincodeActionPayload <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// This field contains the bytes of the ChaincodeProposalPayload message from</span></span><br><span class="line"><span class="comment">// the original invocation (essentially the arguments) after the application</span></span><br><span class="line"><span class="comment">// of the visibility function. The main visibility modes are &quot;full&quot; (the</span></span><br><span class="line"><span class="comment">// entire ChaincodeProposalPayload message is included here), &quot;hash&quot; (only</span></span><br><span class="line"><span class="comment">// the hash of the ChaincodeProposalPayload message is included) or</span></span><br><span class="line"><span class="comment">// &quot;nothing&quot;.  This field will be used to check the consistency of</span></span><br><span class="line"><span class="comment">// ProposalResponsePayload.proposalHash.  For the CHAINCODE type,</span></span><br><span class="line"><span class="comment">// ProposalResponsePayload.proposalHash is supposed to be H(ProposalHeader ||</span></span><br><span class="line"><span class="comment">// f(ChaincodeProposalPayload)) where f is the visibility function.</span></span><br><span class="line">ChaincodeProposalPayload []<span class="keyword">byte</span> <span class="string">``</span> <span class="comment">/* 135-byte string literal not displayed */</span></span><br><span class="line"><span class="comment">// The list of actions to apply to the ledger</span></span><br><span class="line">Action               *ChaincodeEndorsedAction <span class="string">`protobuf:&quot;bytes,2,opt,name=action,proto3&quot; json:&quot;action,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125;                 <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>                   <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>                    <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ChaincodeProposalPayload <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Input contains the arguments for this invocation. If this invocation</span></span><br><span class="line"><span class="comment">// deploys a new chaincode, ESCC/VSCC are part of this field.</span></span><br><span class="line"><span class="comment">// This is usually a marshaled ChaincodeInvocationSpec</span></span><br><span class="line">Input []<span class="keyword">byte</span> <span class="string">`protobuf:&quot;bytes,1,opt,name=input,proto3&quot; json:&quot;input,omitempty&quot;`</span></span><br><span class="line"><span class="comment">// TransientMap contains data (e.g. cryptographic material) that might be used</span></span><br><span class="line"><span class="comment">// to implement some form of application-level confidentiality. The contents</span></span><br><span class="line"><span class="comment">// of this field are supposed to always be omitted from the transaction and</span></span><br><span class="line"><span class="comment">// excluded from the ledger.</span></span><br><span class="line">TransientMap         <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">byte</span> <span class="string">``</span> <span class="comment">/* 165-byte string literal not displayed */</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125;          <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>            <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>             <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含了调用chaincode时的输入参数等，Input：可以通过ChaincodeInvocationSpec解析</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ChaincodeInvocationSpec <span class="keyword">struct</span> &#123;</span><br><span class="line">ChaincodeSpec        *ChaincodeSpec <span class="string">`protobuf:&quot;bytes,1,opt,name=chaincode_spec,json=chaincodeSpec,proto3&quot; json:&quot;chaincode_spec,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125;       <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>         <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>          <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ChaincodeSpec <span class="keyword">struct</span> &#123;</span><br><span class="line">Type                 ChaincodeSpec_Type <span class="string">`protobuf:&quot;varint,1,opt,name=type,proto3,enum=protos.ChaincodeSpec_Type&quot; json:&quot;type,omitempty&quot;`</span></span><br><span class="line">ChaincodeId          *ChaincodeID       <span class="string">`protobuf:&quot;bytes,2,opt,name=chaincode_id,json=chaincodeId,proto3&quot; json:&quot;chaincode_id,omitempty&quot;`</span></span><br><span class="line">Input                *ChaincodeInput    <span class="string">`protobuf:&quot;bytes,3,opt,name=input,proto3&quot; json:&quot;input,omitempty&quot;`</span></span><br><span class="line">Timeout              <span class="keyword">int32</span>              <span class="string">`protobuf:&quot;varint,4,opt,name=timeout,proto3&quot; json:&quot;timeout,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125;           <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>             <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>              <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>携带链码函数及其参数。</p><p>等等！ 回到 ChaincodeActionPayload.Action。</p><p>可通过 ChaincodeEndorsedAction 解析，包含 Proposal Hash 及调用链码时的 Read/Write 的交易信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ChaincodeEndorsedAction <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// This is the bytes of the ProposalResponsePayload message signed by the</span></span><br><span class="line"><span class="comment">// endorsers.  Recall that for the CHAINCODE type, the</span></span><br><span class="line"><span class="comment">// ProposalResponsePayload&#x27;s extenstion field carries a ChaincodeAction</span></span><br><span class="line">ProposalResponsePayload []<span class="keyword">byte</span> <span class="string">``</span> <span class="comment">/* 132-byte string literal not displayed */</span></span><br><span class="line"><span class="comment">// The endorsement of the proposal, basically the endorser&#x27;s signature over</span></span><br><span class="line"><span class="comment">// proposalResponsePayload</span></span><br><span class="line">Endorsements         []*Endorsement <span class="string">`protobuf:&quot;bytes,2,rep,name=endorsements,proto3&quot; json:&quot;endorsements,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125;       <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>         <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>          <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ChaincodeEndorsedAction 携带有关特定提案背书的信息。 </p><p>Endorsements 该字段包含背书者信息数组，每个背书者包含<code>MspId</code>、证书和此次背书的签名<code>signature</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ProposalResponsePayload <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Hash of the proposal that triggered this response. The hash is used to</span></span><br><span class="line"><span class="comment">// link a response with its proposal, both for bookeeping purposes on an</span></span><br><span class="line"><span class="comment">// asynchronous system and for security reasons (accountability,</span></span><br><span class="line"><span class="comment">// non-repudiation). The hash usually covers the entire Proposal message</span></span><br><span class="line"><span class="comment">// (byte-by-byte).</span></span><br><span class="line">ProposalHash []<span class="keyword">byte</span> <span class="string">`protobuf:&quot;bytes,1,opt,name=proposal_hash,json=proposalHash,proto3&quot; json:&quot;proposal_hash,omitempty&quot;`</span></span><br><span class="line"><span class="comment">// Extension should be unmarshaled to a type-specific message. The type of</span></span><br><span class="line"><span class="comment">// the extension in any proposal response depends on the type of the proposal</span></span><br><span class="line"><span class="comment">// that the client selected when the proposal was initially sent out.  In</span></span><br><span class="line"><span class="comment">// particular, this information is stored in the type field of a Header.  For</span></span><br><span class="line"><span class="comment">// chaincode, it&#x27;s a ChaincodeAction message</span></span><br><span class="line">Extension            []<span class="keyword">byte</span>   <span class="string">`protobuf:&quot;bytes,2,opt,name=extension,proto3&quot; json:&quot;extension,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125; <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>   <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>    <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ProposalResponsePayload 是提案响应的负载。此消息是客户端请求和背书人响应该请求的操作之间的“桥梁”。具体来说，对于链码，它包含提案的散列表示（proposalHash）和扩展字段内链码状态变化和事件的表示。</p><p><code>ProposalResponsePayload </code>字段包含链码模拟执行结果对KV类型状态数据库的读写集，包括</p><ul><li><code>proposal_hash</code>（背书哈希值）</li><li><code>results</code>（背书结果）<ul><li><code>data_model</code>（数据模型，但含义未知，一般为0）</li><li><code>ns_rwset</code>（读写集数组）包含<ul><li><code>namespace</code></li><li><code>rwset</code>包含<ul><li><code>read</code>（读集）</li><li><code>writes</code>（写集，包含键、值、删除标志）</li><li><code>range_queries_info</code>（范围查询信息）</li><li><code>metadata_writes</code>。</li></ul></li></ul></li></ul></li><li><code>response</code>（背书响应）包含<ul><li><code>status</code>（响应状态值）</li><li><code>message</code>（响应信息）</li><li><code>payload</code>（返回的数据，一般是查询时采用此字段）。</li></ul></li><li><code>chaincode_id</code>（链码信息）</li></ul><p>Extension可通过ChaincodeAction来解析，包含了Read/Write操作的交易</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ChaincodeAction <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// This field contains the read set and the write set produced by the</span></span><br><span class="line"><span class="comment">// chaincode executing this invocation.</span></span><br><span class="line">Results []<span class="keyword">byte</span> <span class="string">`protobuf:&quot;bytes,1,opt,name=results,proto3&quot; json:&quot;results,omitempty&quot;`</span></span><br><span class="line"><span class="comment">// This field contains the event generated by the chaincode.</span></span><br><span class="line"><span class="comment">// Only a single marshaled ChaincodeEvent is included.</span></span><br><span class="line">Events []<span class="keyword">byte</span> <span class="string">`protobuf:&quot;bytes,2,opt,name=events,proto3&quot; json:&quot;events,omitempty&quot;`</span></span><br><span class="line"><span class="comment">// This field contains the result of executing this invocation.</span></span><br><span class="line">Response *Response <span class="string">`protobuf:&quot;bytes,3,opt,name=response,proto3&quot; json:&quot;response,omitempty&quot;`</span></span><br><span class="line"><span class="comment">// This field contains the ChaincodeID of executing this invocation. Endorser</span></span><br><span class="line"><span class="comment">// will set it with the ChaincodeID called by endorser while simulating proposal.</span></span><br><span class="line"><span class="comment">// Committer will validate the version matching with latest chaincode version.</span></span><br><span class="line"><span class="comment">// Adding ChaincodeID to keep version opens up the possibility of multiple</span></span><br><span class="line"><span class="comment">// ChaincodeAction per transaction.</span></span><br><span class="line">ChaincodeId          *ChaincodeID <span class="string">`protobuf:&quot;bytes,4,opt,name=chaincode_id,json=chaincodeId,proto3&quot; json:&quot;chaincode_id,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125;     <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>       <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>        <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ChaincodeAction 包含执行的链码结果、响应和事件。 Results 可通过 TxReadWriteSet 解析</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TxReadWriteSet <span class="keyword">struct</span> &#123;</span><br><span class="line">DataModel            TxReadWriteSet_DataModel <span class="string">`protobuf:&quot;varint,1,opt,name=data_model,json=dataModel,proto3,enum=rwset.TxReadWriteSet_DataModel&quot; json:&quot;data_model,omitempty&quot;`</span></span><br><span class="line">NsRwset              []*NsReadWriteSet        <span class="string">`protobuf:&quot;bytes,2,rep,name=ns_rwset,json=nsRwset,proto3&quot; json:&quot;ns_rwset,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125;                 <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>                   <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>                    <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TxReadWriteSet 封装了一个事务的读写集 DataModel 指定数据模型的枚举值 ns_rwset 字段指定链码特定的读写集列表（每个链码一个）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NsReadWriteSet <span class="keyword">struct</span> &#123;</span><br><span class="line">Namespace             <span class="keyword">string</span>                          <span class="string">`protobuf:&quot;bytes,1,opt,name=namespace,proto3&quot; json:&quot;namespace,omitempty&quot;`</span></span><br><span class="line">Rwset                 []<span class="keyword">byte</span>                          <span class="string">`protobuf:&quot;bytes,2,opt,name=rwset,proto3&quot; json:&quot;rwset,omitempty&quot;`</span></span><br><span class="line">CollectionHashedRwset []*CollectionHashedReadWriteSet <span class="string">``</span> <span class="comment">/* 126-byte string literal not displayed */</span></span><br><span class="line">XXX_NoUnkeyedLiteral  <span class="keyword">struct</span>&#123;&#125;                        <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized      []<span class="keyword">byte</span>                          <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache         <span class="keyword">int32</span>                           <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NsReadWriteSet 封装了链码的读写集。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> KVRWSet <span class="keyword">struct</span> &#123;</span><br><span class="line">Reads                []*KVRead          <span class="string">`protobuf:&quot;bytes,1,rep,name=reads,proto3&quot; json:&quot;reads,omitempty&quot;`</span></span><br><span class="line">RangeQueriesInfo     []*RangeQueryInfo  <span class="string">`protobuf:&quot;bytes,2,rep,name=range_queries_info,json=rangeQueriesInfo,proto3&quot; json:&quot;range_queries_info,omitempty&quot;`</span></span><br><span class="line">Writes               []*KVWrite         <span class="string">`protobuf:&quot;bytes,3,rep,name=writes,proto3&quot; json:&quot;writes,omitempty&quot;`</span></span><br><span class="line">MetadataWrites       []*KVMetadataWrite <span class="string">`protobuf:&quot;bytes,4,rep,name=metadata_writes,json=metadataWrites,proto3&quot; json:&quot;metadata_writes,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125;           <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>             <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>              <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>KVRWSet 封装了链码的读写集，该链码在 KV 或 Document 数据模型上运行此结构用于公共数据和私有数据。</p><p>到这我已经麻了，想看就看看，实在不行就找一份代码容易多了，艹。</p><h2 id="Block-MetaData"><a href="#Block-MetaData" class="headerlink" title="Block MetaData"></a>Block MetaData</h2><p>元数据：和当前区块相关的元数据，用于描述 Data 的相关信息，包含排序节点的 MspId、证书和随机数，以及签名。 value 的 index 属性及一些其他的字段含义也不太清楚，但是这些信息大多是空值并且与区块链相关状态信息并不相关。元数据是用于编码块元数据的通用结构。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Metadata <span class="keyword">struct</span> &#123;</span><br><span class="line">Value                []<span class="keyword">byte</span>               <span class="string">`protobuf:&quot;bytes,1,opt,name=value,proto3&quot; json:&quot;value,omitempty&quot;`</span></span><br><span class="line">Signatures           []*MetadataSignature <span class="string">`protobuf:&quot;bytes,2,rep,name=signatures,proto3&quot; json:&quot;signatures,omitempty&quot;`</span></span><br><span class="line">XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125;             <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_unrecognized     []<span class="keyword">byte</span>               <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">XXX_sizecache        <span class="keyword">int32</span>                <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>我的项目：<a href="https://github.com/FuradWho/GoExplore">https://github.com/FuradWho/GoExplore</a></p><p>大致的 Fabric 区块一个结构就是这样了，我想只要一直对应最开始的那几个图就完事了，就可以大致的完成一个区块链浏览器的全部数据解析了。具体的可以看一下我的项目，虽然我也是借鉴了大佬们的想法 QAQ 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Fabric-区块数据解析&quot;&gt;&lt;a href=&quot;#Fabric-区块数据解析&quot; class=&quot;headerlink&quot; title=&quot;Fabric 区块数据解析&quot;&gt;&lt;/a&gt;Fabric 区块数据解析&lt;/h1&gt;&lt;p&gt;这个文章主要是使用 Go 对于 Fabric 的区块</summary>
      
    
    
    
    <category term="Hyperledger Fabric" scheme="http://www.furadwho.top/categories/Hyperledger-Fabric/"/>
    
    
    <category term="Fabric" scheme="http://www.furadwho.top/tags/Fabric/"/>
    
  </entry>
  
  <entry>
    <title>hexo 常用命令</title>
    <link href="http://www.furadwho.top/2021/10/21/hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.furadwho.top/2021/10/21/hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-10-21T02:28:31.000Z</published>
    <updated>2021-10-21T02:47:38.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用-hexo-命令"><a href="#常用-hexo-命令" class="headerlink" title="常用 hexo 命令"></a><strong>常用 hexo 命令</strong></h1><h2 id="初始化命令"><a href="#初始化命令" class="headerlink" title="初始化命令"></a>初始化命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo -g //安装hexo</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> npm update hexo -g //更新hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init     //初始化博客</span></span><br></pre></td></tr></table></figure><h2 id="命令简写"><a href="#命令简写" class="headerlink" title="命令简写"></a>命令简写</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo n <span class="string">&quot;博客名称&quot;</span> = hexo new <span class="string">&quot;博客名称&quot;</span>//新建一篇博客</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g = hexo generate //生成页面</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d = hexo deploy     //部署</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo new page <span class="string">&quot;name&quot;</span>   //新建页面</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g -d                                //生成页面并部署</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s = hexo server                   //启动服务器、本地预览</span></span><br></pre></td></tr></table></figure><h2 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo server                //hexo会监视文件变动并自动更新，无须重启服务器</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server -s            //静态模式</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server -p 5000        //更改端口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server -i 192.168.1.1//自定义 IP地址</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo clean                //清除缓存和已生成的静态文件，若是网页正常情况下可以忽略这条命令</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo <span class="built_in">help</span>                     //帮助</span></span><br></pre></td></tr></table></figure><h2 id="博客头格式"><a href="#博客头格式" class="headerlink" title="博客头格式"></a>博客头格式</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过如下字段,Hexo会自动添加博文分类和博文标签的相关配置</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">title</span> <span class="comment"># 添加博文标题</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">categories</span> <span class="comment"># 添加博文分类</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">tags</span> <span class="comment"># 添加博文标签</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用-hexo-命令&quot;&gt;&lt;a href=&quot;#常用-hexo-命令&quot; class=&quot;headerlink&quot; title=&quot;常用 hexo 命令&quot;&gt;&lt;/a&gt;&lt;strong&gt;常用 hexo 命令&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;初始化命令&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="奇巧淫技" scheme="http://www.furadwho.top/categories/%E5%A5%87%E5%B7%A7%E6%B7%AB%E6%8A%80/"/>
    
    
    <category term="hexo" scheme="http://www.furadwho.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>一元线性回归及Java实现</title>
    <link href="http://www.furadwho.top/2021/08/15/%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%8F%8AJava%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.furadwho.top/2021/08/15/%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%8F%8AJava%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-08-15T13:03:44.000Z</published>
    <updated>2021-10-21T02:49:29.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一元线性回归及Java实现"><a href="#一元线性回归及Java实现" class="headerlink" title="一元线性回归及Java实现"></a>一元线性回归及Java实现</h1><h2 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h2><p>回归问题是研究自变量和因变量之间关系的一种预测模型技术。例如我们可以通过回归模型去预测房价与房子面积之间的关系，一个人每周花在微信上的时间和他微信好友数量之间的关系等。</p><p>回归模型定义了输入和输出的关系。输入为现有信息，输出为预测。</p><p>一个预测问题在回归模型下的解决步骤为：</p><ol><li>构造训练集；</li><li>学习，得到输入输出间的关系；</li><li>预测，通过学习得到的关系预测输出。</li></ol><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>假设要使用回归模型预测一个人每周花在微信上的时间和微信好友数量之间的关系，可以用如下的表达式表示：</p><p>y=ax+b+e</p><p>其中，<em>y</em>是你每周需要花费在微信上的时间，<em>x</em>是你的微信好友数量，<em>e</em>是误差。对于误差<em>e</em>，它不是一个定值，有一对<em>y</em>和<em>x</em>，就有一个<em>e</em>，<em>e</em>的值满足正态分布。</p><h2 id="使用最小二乘法拟合"><a href="#使用最小二乘法拟合" class="headerlink" title="使用最小二乘法拟合"></a>使用最小二乘法拟合</h2><p>对于上面的样本集，我们尝试用y=ax+b+ey=ax+b+e去进行拟合，那么可以得到：</p><p>∣e∣=∣ax+b−y∣</p><p>误差大小其实就是猜想的ax+bax+b的值和观测到的<em>y</em>值之间的差值。把所有的∣e∣∣e∣都求和，构造一个函数：</p><p>Q=n∑(axi+b−yi)2</p><p>当QQ最小的时候，即可得到最佳拟合的直线。</p><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><p>首先构造一个类来存放记录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> y;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getXY</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x * <span class="keyword">this</span>.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后构造<code>MyLinearRegression</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinearRegression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DataNode&gt; list;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> alpha;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> beta;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> r;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLinearRegression</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = <span class="keyword">new</span> ArrayList&lt;DataNode&gt;();</span><br><span class="line">        init(path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getAlpha</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> alpha;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBeta</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beta;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getR</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(path)));</span><br><span class="line">        String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String str[] = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            DataNode dataNode = <span class="keyword">new</span> DataNode();</span><br><span class="line">            dataNode.setX(Double.parseDouble(str[<span class="number">0</span>]));</span><br><span class="line">            dataNode.setY(Double.parseDouble(str[<span class="number">1</span>]));</span><br><span class="line">            <span class="keyword">this</span>.list.add(dataNode);</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后要根据读取到的数据去求<code>alpha</code>，<code>beta</code>和<code>r</code>的值。可以直接利用上面的公式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = list.size();</span><br><span class="line">    <span class="keyword">double</span> sumX = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> sumY = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> sumXY = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> sumX2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (DataNode dataNode : list)&#123;</span><br><span class="line">        sumX += dataNode.getX();</span><br><span class="line">        sumY += dataNode.getY();</span><br><span class="line">        sumXY += dataNode.getXY();</span><br><span class="line">        sumX2 += Math.pow(dataNode.getX(), <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.alpha = (((sumY * sumX) / n) - sumXY) / (((sumX * sumX) / n) - sumX2);</span><br><span class="line">    <span class="keyword">this</span>.beta = (sumY - <span class="keyword">this</span>.alpha * sumX) / n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getR2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> den = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> sumY = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (DataNode dataNode : list)&#123;</span><br><span class="line">        sumY += dataNode.getY();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> avgY = sumY / list.size();</span><br><span class="line">    <span class="keyword">for</span> (DataNode dataNode : list)&#123;</span><br><span class="line">        num += Math.pow((dataNode.getY() - (dataNode.getX() * <span class="keyword">this</span>.alpha + beta)), <span class="number">2</span>);</span><br><span class="line">        den += Math.pow((dataNode.getY() - avgY), <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.r = <span class="number">1</span> - (num / den);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用上述数据集拟合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        String path = <span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line">        MyLinearRegression linearRegression = <span class="keyword">new</span> MyLinearRegression(path);</span><br><span class="line">        linearRegression.getAB();</span><br><span class="line">        linearRegression.getR2();</span><br><span class="line">        System.out.println(<span class="string">&quot;alpha = &quot;</span> + linearRegression.getAlpha());</span><br><span class="line">        System.out.println(<span class="string">&quot;beta = &quot;</span> + linearRegression.getBeta());</span><br><span class="line">        System.out.println(<span class="string">&quot;R2 = &quot;</span> + linearRegression.getR());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alpha = <span class="number">0.6058710840658103</span></span><br><span class="line">beta = <span class="number">26.861280144241604</span></span><br><span class="line">R2 = <span class="number">0.9001321912140731</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一元线性回归及Java实现&quot;&gt;&lt;a href=&quot;#一元线性回归及Java实现&quot; class=&quot;headerlink&quot; title=&quot;一元线性回归及Java实现&quot;&gt;&lt;/a&gt;一元线性回归及Java实现&lt;/h1&gt;&lt;h2 id=&quot;回归问题&quot;&gt;&lt;a href=&quot;#回归问题&quot;</summary>
      
    
    
    
    <category term="Machine learning" scheme="http://www.furadwho.top/categories/Machine-learning/"/>
    
    
    <category term="算法" scheme="http://www.furadwho.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>阅后即焚（一）</title>
    <link href="http://www.furadwho.top/2021/08/14/%E9%98%85%E5%90%8E%E5%8D%B3%E7%84%9A%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.furadwho.top/2021/08/14/%E9%98%85%E5%90%8E%E5%8D%B3%E7%84%9A%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-08-14T15:00:21.000Z</published>
    <updated>2021-10-21T02:52:16.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阅后即焚（一）"><a href="#阅后即焚（一）" class="headerlink" title="阅后即焚（一）"></a><strong>阅后即焚（一）</strong></h1><p>生命只是一连串孤立的片刻，靠着回忆和幻想，许多意义浮现了，然后消失，消失之后又浮现。<br>      ——普鲁斯特《追忆似水年华》</p><p>“おげんきですか？わたしはげんきです”，而病床上的少女藤井树也喃喃的问“おげんきですか？わたしはげんきです”。</p><p>我爱你，想着你久久无法忘怀！</p><p>曾经一度被说像“春天小熊”而感动，原来是一只来自挪威森林的小熊。“春天的原野里，你一个人正走着，对面走来一只可爱的小熊，浑身的毛活像天鹅绒，眼睛圆鼓鼓的。它这么对你说道：‘你好，小姐，和我一块儿打滚玩儿好么？’接着，你就和小熊抱在一起，顺着长满三叶草的山坡咕噜咕噜滚下去，整整玩了一大天。”很喜欢这段渡边对绿子说的话，喜欢得不得了。</p><p>我在桌前静静地看着你，越来越喜欢，越来越依赖，无法失去！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;阅后即焚（一）&quot;&gt;&lt;a href=&quot;#阅后即焚（一）&quot; class=&quot;headerlink&quot; title=&quot;阅后即焚（一）&quot;&gt;&lt;/a&gt;&lt;strong&gt;阅后即焚（一）&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;生命只是一连串孤立的片刻，靠着回忆和幻想，许多意义浮现了，然后消失</summary>
      
    
    
    
    <category term="阅后即焚" scheme="http://www.furadwho.top/categories/%E9%98%85%E5%90%8E%E5%8D%B3%E7%84%9A/"/>
    
    
    <category term="emo" scheme="http://www.furadwho.top/tags/emo/"/>
    
  </entry>
  
</feed>
